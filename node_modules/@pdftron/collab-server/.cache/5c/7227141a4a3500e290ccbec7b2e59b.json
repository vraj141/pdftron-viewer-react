{"id":"wlKG","dependencies":[{"name":"/Users/loganbittner/Documents/apollo-collab/tsconfig.json","includedInParent":true,"mtime":1607459922744},{"name":"/Users/loganbittner/Documents/apollo-collab/packages/collab-server/package.json","includedInParent":true,"mtime":1607970749445}],"generated":{"js":"\"use strict\";var e,t,r,s;Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.ChangeEventTypes=exports.OrderTypes=exports.OrderDirections=exports.UserTypes=void 0,function(e){e.Anonymous=\"ANONYMOUS\",e.Standard=\"STANDARD\"}(e=exports.UserTypes||(exports.UserTypes={})),function(e){e.Asc=\"ASC\",e.Desc=\"DESC\"}(t=exports.OrderDirections||(exports.OrderDirections={})),function(e){e.UpdatedAt=\"updatedAt\",e.CreatedAt=\"createdAt\"}(r=exports.OrderTypes||(exports.OrderTypes={})),function(e){e.Add=\"ADD\",e.Edit=\"EDIT\",e.Delete=\"DELETE\",e.Invite=\"INVITE\"}(s=exports.ChangeEventTypes||(exports.ChangeEventTypes={}));"},"sourceMaps":{"js":{"mappings":[{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":1,"column":13}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":27,"column":12},"generated":{"line":1,"column":17}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":32,"column":12},"generated":{"line":1,"column":19}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":37,"column":12},"generated":{"line":1,"column":21}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":12},"generated":{"line":1,"column":23}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":25}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":32}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":47}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":55}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":68}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":69}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":76}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":80}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":88}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":105}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":113}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":124}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":132}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":148}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":156}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":171}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":1,"column":173}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":27,"column":12},"generated":{"line":1,"column":182}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":1,"column":185}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":1,"column":187}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":1,"column":197}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":29,"column":2},"generated":{"line":1,"column":209}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":29,"column":2},"generated":{"line":1,"column":211}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":29,"column":2},"generated":{"line":1,"column":220}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":1,"column":231}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":27,"column":12},"generated":{"line":1,"column":232}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":27,"column":12},"generated":{"line":1,"column":234}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":27,"column":12},"generated":{"line":1,"column":242}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":27,"column":12},"generated":{"line":1,"column":254}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":27,"column":12},"generated":{"line":1,"column":262}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":27,"column":21},"generated":{"line":1,"column":272}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":1,"column":277}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":32,"column":12},"generated":{"line":1,"column":286}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":33,"column":2},"generated":{"line":1,"column":289}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":33,"column":2},"generated":{"line":1,"column":291}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":33,"column":2},"generated":{"line":1,"column":295}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":1,"column":301}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":1,"column":303}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":1,"column":308}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":1,"column":315}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":32,"column":12},"generated":{"line":1,"column":316}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":32,"column":12},"generated":{"line":1,"column":318}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":32,"column":12},"generated":{"line":1,"column":326}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":32,"column":12},"generated":{"line":1,"column":344}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":32,"column":12},"generated":{"line":1,"column":352}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":32,"column":27},"generated":{"line":1,"column":368}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":37,"column":0},"generated":{"line":1,"column":373}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":37,"column":12},"generated":{"line":1,"column":382}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":38,"column":2},"generated":{"line":1,"column":385}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":38,"column":2},"generated":{"line":1,"column":387}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":38,"column":2},"generated":{"line":1,"column":397}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":39,"column":2},"generated":{"line":1,"column":409}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":39,"column":2},"generated":{"line":1,"column":411}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":39,"column":2},"generated":{"line":1,"column":421}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":37,"column":0},"generated":{"line":1,"column":433}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":37,"column":12},"generated":{"line":1,"column":434}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":37,"column":12},"generated":{"line":1,"column":436}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":37,"column":12},"generated":{"line":1,"column":444}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":37,"column":12},"generated":{"line":1,"column":457}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":37,"column":12},"generated":{"line":1,"column":465}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":37,"column":22},"generated":{"line":1,"column":476}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":481}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":12},"generated":{"line":1,"column":490}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":514,"column":2},"generated":{"line":1,"column":493}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":514,"column":2},"generated":{"line":1,"column":495}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":514,"column":2},"generated":{"line":1,"column":499}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":515,"column":2},"generated":{"line":1,"column":505}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":515,"column":2},"generated":{"line":1,"column":507}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":515,"column":2},"generated":{"line":1,"column":512}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":516,"column":2},"generated":{"line":1,"column":519}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":516,"column":2},"generated":{"line":1,"column":521}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":516,"column":2},"generated":{"line":1,"column":528}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":517,"column":2},"generated":{"line":1,"column":537}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":517,"column":2},"generated":{"line":1,"column":539}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":517,"column":2},"generated":{"line":1,"column":546}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":1,"column":555}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":12},"generated":{"line":1,"column":556}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":12},"generated":{"line":1,"column":558}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":12},"generated":{"line":1,"column":566}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":12},"generated":{"line":1,"column":585}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":12},"generated":{"line":1,"column":593}},{"source":"../../../types/resolvers-types.ts","name":null,"original":{"line":513,"column":28},"generated":{"line":1,"column":610}}],"sources":{"../../../types/resolvers-types.ts":"import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Date: any;\n};\n\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  email?: Maybe<Scalars['String']>;\n  type: UserTypes;\n  userName?: Maybe<Scalars['String']>;\n  createdAt: Scalars['Date'];\n  updatedAt: Scalars['Date'];\n  documents: Array<Document>;\n};\n\nexport enum UserTypes {\n  Anonymous = 'ANONYMOUS',\n  Standard = 'STANDARD'\n}\n\nexport enum OrderDirections {\n  Asc = 'ASC',\n  Desc = 'DESC'\n}\n\nexport enum OrderTypes {\n  UpdatedAt = 'updatedAt',\n  CreatedAt = 'createdAt'\n}\n\nexport type Member = {\n  id: Scalars['ID'];\n  documentId: Scalars['ID'];\n  lastRead: Scalars['Date'];\n};\n\nexport type AnnotationMember = Member & {\n  __typename?: 'AnnotationMember';\n  id: Scalars['ID'];\n  documentId: Scalars['ID'];\n  annotationId: Scalars['ID'];\n  lastRead: Scalars['Date'];\n  createdAt: Scalars['Date'];\n  updatedAt: Scalars['Date'];\n  annotationCreatedAt: Scalars['Date'];\n};\n\nexport type DocumentMember = Member & {\n  __typename?: 'DocumentMember';\n  id: Scalars['ID'];\n  user: User;\n  documentId: Scalars['ID'];\n  lastRead: Scalars['Date'];\n  createdAt: Scalars['Date'];\n  updatedAt: Scalars['Date'];\n};\n\nexport type Annotation = {\n  __typename?: 'Annotation';\n  id: Scalars['ID'];\n  xfdf: Scalars['String'];\n  annotContents?: Maybe<Scalars['String']>;\n  author?: Maybe<User>;\n  documentId: Scalars['ID'];\n  pageNumber: Scalars['Int'];\n  createdAt: Scalars['Date'];\n  updatedAt: Scalars['Date'];\n  membership?: Maybe<AnnotationMember>;\n  mentions: Array<Mention>;\n  inReplyTo?: Maybe<Scalars['ID']>;\n};\n\nexport type Document = {\n  __typename?: 'Document';\n  id: Scalars['ID'];\n  annotations: Array<Annotation>;\n  members: Array<DocumentMember>;\n  authorId: Scalars['ID'];\n  createdAt: Scalars['Date'];\n  updatedAt: Scalars['Date'];\n  isPublic?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n  unreadCount: Scalars['Int'];\n};\n\nexport type DeleteResult = {\n  __typename?: 'DeleteResult';\n  id?: Maybe<Scalars['ID']>;\n  successful: Scalars['Boolean'];\n  message?: Maybe<Scalars['String']>;\n};\n\nexport type ConnectResult = {\n  __typename?: 'ConnectResult';\n  userId?: Maybe<Scalars['ID']>;\n  documentId?: Maybe<Scalars['ID']>;\n  successful: Scalars['Boolean'];\n};\n\nexport type Mention = {\n  __typename?: 'Mention';\n  id: Scalars['ID'];\n  annotationId: Scalars['ID'];\n  documentId: Scalars['ID'];\n  mentionedUser: User;\n  /** Use this to record if the annotation that this mention belongs to is read when the mention is created. */\n  readBeforeMention?: Maybe<Scalars['Boolean']>;\n  createdAt: Scalars['Date'];\n  updatedAt: Scalars['Date'];\n};\n\nexport type ScrollSyncPosition = {\n  __typename?: 'ScrollSyncPosition';\n  scrollTop?: Maybe<Scalars['Int']>;\n  scrollHeight?: Maybe<Scalars['Int']>;\n};\n\nexport type ScrollSyncResult = {\n  __typename?: 'ScrollSyncResult';\n  position?: Maybe<ScrollSyncPosition>;\n};\n\nexport type NewScrollPositionInput = {\n  scrollTop?: Maybe<Scalars['Int']>;\n  scrollHeight?: Maybe<Scalars['Int']>;\n};\n\nexport type NewAnnotationInput = {\n  id: Scalars['ID'];\n  xfdf: Scalars['String'];\n  annotContents?: Maybe<Scalars['String']>;\n  mentionedUserIds?: Maybe<Array<Scalars['ID']>>;\n  authorId?: Maybe<Scalars['ID']>;\n  documentId: Scalars['ID'];\n  pageNumber: Scalars['Int'];\n  inReplyTo?: Maybe<Scalars['ID']>;\n  createdAt: Scalars['Date'];\n  updatedAt: Scalars['Date'];\n};\n\nexport type EditAnnotationInput = {\n  xfdf?: Maybe<Scalars['String']>;\n  annotContents?: Maybe<Scalars['String']>;\n  pageNumber?: Maybe<Scalars['Int']>;\n  updatedAt: Scalars['Date'];\n};\n\nexport type NewAnnotationMemberInput = {\n  annotationId: Scalars['ID'];\n  documentId: Scalars['ID'];\n  userId: Scalars['ID'];\n  updatedAt: Scalars['Date'];\n  createdAt: Scalars['Date'];\n};\n\nexport type EditAnnotationMemberInput = {\n  lastRead?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Date'];\n};\n\nexport type NewDocumentMemberInput = {\n  documentId: Scalars['ID'];\n  userId: Scalars['ID'];\n  lastRead: Scalars['Date'];\n  updatedAt: Scalars['Date'];\n  createdAt: Scalars['Date'];\n};\n\nexport type EditDocumentMemberInput = {\n  lastRead?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Date'];\n};\n\nexport type NewDocumentInput = {\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  authorId: Scalars['ID'];\n  isPublic?: Maybe<Scalars['Boolean']>;\n  updatedAt: Scalars['Date'];\n  createdAt: Scalars['Date'];\n};\n\nexport type EditDocumentInput = {\n  isPublic?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Date'];\n};\n\nexport type NewUserInput = {\n  userName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  type?: Maybe<UserTypes>;\n  updatedAt: Scalars['Date'];\n  createdAt: Scalars['Date'];\n};\n\nexport type EditUserInput = {\n  userName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  type?: Maybe<UserTypes>;\n  updatedAt: Scalars['Date'];\n};\n\nexport type InvitedUserInput = {\n  id?: Maybe<Scalars['ID']>;\n  userName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteAnnotationMemberInput = {\n  memberId?: Maybe<Scalars['ID']>;\n  annotationId?: Maybe<Scalars['ID']>;\n  userId?: Maybe<Scalars['ID']>;\n};\n\nexport type DeleteDocumentMemberInput = {\n  memberId: Scalars['ID'];\n};\n\nexport type NewMentionInput = {\n  userId: Scalars['ID'];\n  annotationId: Scalars['ID'];\n  documentId: Scalars['ID'];\n  updatedAt: Scalars['Date'];\n  createdAt: Scalars['Date'];\n};\n\nexport type EditMentionInput = {\n  readBeforeMention?: Maybe<Scalars['Boolean']>;\n  updatedAt: Scalars['Date'];\n};\n\nexport type ConnectedDocUser = {\n  __typename?: 'ConnectedDocUser';\n  userId: Scalars['ID'];\n  currentPage?: Maybe<Scalars['Int']>;\n};\n\nexport type EditConnectedDocUserInput = {\n  documentId: Scalars['ID'];\n  userId: Scalars['ID'];\n  currentPage?: Maybe<Scalars['Int']>;\n};\n\nexport type DeleteConnectedDocUserInput = {\n  documentId: Scalars['ID'];\n  userId: Scalars['ID'];\n};\n\nexport type AuthUser = {\n  __typename?: 'AuthUser';\n  id: Scalars['ID'];\n  userName?: Maybe<Scalars['String']>;\n  token?: Maybe<Scalars['String']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  user: User;\n  annotation?: Maybe<Annotation>;\n  annotations: Array<Annotation>;\n  document?: Maybe<Document>;\n  documents: Array<Document>;\n  session?: Maybe<AuthUser>;\n  mentions: Array<Mention>;\n  isScrollSyncAvailable: Scalars['Boolean'];\n  scrollSyncPosition?: Maybe<ScrollSyncResult>;\n  connectedDocUsers: Array<ConnectedDocUser>;\n};\n\n\nexport type QueryUserArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryAnnotationArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryAnnotationsArgs = {\n  documentId: Scalars['ID'];\n};\n\n\nexport type QueryDocumentArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryDocumentsArgs = {\n  userId: Scalars['ID'];\n  limit: Scalars['Int'];\n  before?: Maybe<Scalars['Date']>;\n  orderBy?: Maybe<OrderTypes>;\n  orderDirection?: Maybe<OrderDirections>;\n};\n\n\nexport type QueryMentionsArgs = {\n  annotationId: Scalars['ID'];\n};\n\n\nexport type QueryIsScrollSyncAvailableArgs = {\n  userId: Scalars['ID'];\n  documentId: Scalars['ID'];\n};\n\n\nexport type QueryScrollSyncPositionArgs = {\n  documentId: Scalars['ID'];\n};\n\n\nexport type QueryConnectedDocUsersArgs = {\n  documentId: Scalars['ID'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addAnnotation: Annotation;\n  editAnnotation: Annotation;\n  deleteAnnotation: DeleteResult;\n  addAnnotationMember: AnnotationMember;\n  editAnnotationMember: AnnotationMember;\n  updateAnnotationMemberLastRead: UpdateAnnotationMemberLastReadPayload;\n  deleteAnnotationMember: DeleteResult;\n  addDocument: Document;\n  inviteUsersToDocument: Document;\n  editDocument: Document;\n  deleteDocument: DeleteResult;\n  addDocumentMember: DocumentMember;\n  editDocumentMember: DocumentMember;\n  deleteDocumentMember: DeleteResult;\n  addUser: User;\n  login: AuthPayload;\n  loginAnonymous: AuthPayload;\n  endSession?: Maybe<Scalars['Boolean']>;\n  addMention: Mention;\n  editMention: Mention;\n  deleteMention: DeleteResult;\n  markAllAsRead: Document;\n  editScrollSync: ScrollSyncResult;\n  deleteScrollSync: DeleteResult;\n  connectUserToDocument: ConnectResult;\n  editConnectedDocUser?: Maybe<Array<Maybe<ConnectedDocUser>>>;\n  deleteConnectedDocUser: DeleteResult;\n};\n\n\nexport type MutationAddAnnotationArgs = {\n  input: NewAnnotationInput;\n};\n\n\nexport type MutationEditAnnotationArgs = {\n  id: Scalars['ID'];\n  input: EditAnnotationInput;\n};\n\n\nexport type MutationDeleteAnnotationArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationAddAnnotationMemberArgs = {\n  input: NewAnnotationMemberInput;\n};\n\n\nexport type MutationEditAnnotationMemberArgs = {\n  annotationId: Scalars['ID'];\n  userId: Scalars['ID'];\n  memberId?: Maybe<Scalars['ID']>;\n  input?: Maybe<EditAnnotationMemberInput>;\n};\n\n\nexport type MutationUpdateAnnotationMemberLastReadArgs = {\n  annotationId: Scalars['ID'];\n  userId: Scalars['ID'];\n};\n\n\nexport type MutationDeleteAnnotationMemberArgs = {\n  input: DeleteAnnotationMemberInput;\n};\n\n\nexport type MutationAddDocumentArgs = {\n  document: NewDocumentInput;\n  annotations?: Maybe<Array<NewAnnotationInput>>;\n  usersInvited?: Maybe<Array<InvitedUserInput>>;\n};\n\n\nexport type MutationInviteUsersToDocumentArgs = {\n  id: Scalars['ID'];\n  usersInvited?: Maybe<Array<InvitedUserInput>>;\n};\n\n\nexport type MutationEditDocumentArgs = {\n  id: Scalars['ID'];\n  input?: Maybe<EditDocumentInput>;\n};\n\n\nexport type MutationDeleteDocumentArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationAddDocumentMemberArgs = {\n  input: NewDocumentMemberInput;\n};\n\n\nexport type MutationEditDocumentMemberArgs = {\n  documentId: Scalars['ID'];\n  userId: Scalars['ID'];\n  memberId?: Maybe<Scalars['ID']>;\n  input?: Maybe<EditDocumentMemberInput>;\n};\n\n\nexport type MutationDeleteDocumentMemberArgs = {\n  input: DeleteDocumentMemberInput;\n};\n\n\nexport type MutationAddUserArgs = {\n  input: NewUserInput;\n};\n\n\nexport type MutationLoginArgs = {\n  email?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  token?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationLoginAnonymousArgs = {\n  userName?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationAddMentionArgs = {\n  input?: Maybe<NewMentionInput>;\n};\n\n\nexport type MutationEditMentionArgs = {\n  userId: Scalars['ID'];\n  annotationId: Scalars['ID'];\n  input?: Maybe<EditMentionInput>;\n};\n\n\nexport type MutationDeleteMentionArgs = {\n  userId: Scalars['ID'];\n  annotationId: Scalars['ID'];\n};\n\n\nexport type MutationMarkAllAsReadArgs = {\n  documentId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type MutationEditScrollSyncArgs = {\n  documentId: Scalars['ID'];\n  userId: Scalars['ID'];\n  position: NewScrollPositionInput;\n};\n\n\nexport type MutationDeleteScrollSyncArgs = {\n  documentId: Scalars['ID'];\n};\n\n\nexport type MutationConnectUserToDocumentArgs = {\n  documentId: Scalars['ID'];\n  userId: Scalars['ID'];\n};\n\n\nexport type MutationEditConnectedDocUserArgs = {\n  input: EditConnectedDocUserInput;\n};\n\n\nexport type MutationDeleteConnectedDocUserArgs = {\n  input: DeleteConnectedDocUserInput;\n};\n\nexport enum ChangeEventTypes {\n  Add = 'ADD',\n  Edit = 'EDIT',\n  Delete = 'DELETE',\n  Invite = 'INVITE'\n}\n\nexport type AnnotationSubscriptionEvent = {\n  __typename?: 'AnnotationSubscriptionEvent';\n  annotation: Annotation;\n  document?: Maybe<Document>;\n  action: ChangeEventTypes;\n  markedAsRead?: Maybe<Scalars['Boolean']>;\n  mentionedCurrentUser?: Maybe<Scalars['Boolean']>;\n};\n\nexport type DocumentSubscriptionEvent = {\n  __typename?: 'DocumentSubscriptionEvent';\n  document: Document;\n  markedAllAsRead?: Maybe<Scalars['Boolean']>;\n  action: ChangeEventTypes;\n};\n\nexport type MentionSubscriptionEvent = {\n  __typename?: 'MentionSubscriptionEvent';\n  mention: Mention;\n  action: ChangeEventTypes;\n};\n\nexport type ScrollPositionSubscriptionEvent = {\n  __typename?: 'ScrollPositionSubscriptionEvent';\n  documentId: Scalars['ID'];\n  position?: Maybe<ScrollSyncPosition>;\n  action: ChangeEventTypes;\n};\n\nexport type ConnectedDocUsersSubscriptionEvent = {\n  __typename?: 'ConnectedDocUsersSubscriptionEvent';\n  documentId: Scalars['ID'];\n  connectedDocUsers: Array<ConnectedDocUser>;\n  action: ChangeEventTypes;\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  annotationChanged: AnnotationSubscriptionEvent;\n  documentChanged: DocumentSubscriptionEvent;\n  mentionChanged: MentionSubscriptionEvent;\n  scrollPositionChanged: ScrollPositionSubscriptionEvent;\n  connectedDocUsersChanged: ConnectedDocUsersSubscriptionEvent;\n};\n\n\nexport type SubscriptionAnnotationChangedArgs = {\n  userId: Scalars['ID'];\n};\n\n\nexport type SubscriptionDocumentChangedArgs = {\n  userId: Scalars['ID'];\n};\n\n\nexport type SubscriptionMentionChangedArgs = {\n  userId: Scalars['ID'];\n};\n\n\nexport type SubscriptionScrollPositionChangedArgs = {\n  docId: Scalars['ID'];\n};\n\n\nexport type SubscriptionConnectedDocUsersChangedArgs = {\n  docId: Scalars['ID'];\n};\n\nexport type AuthPayload = {\n  __typename?: 'AuthPayload';\n  user?: Maybe<User>;\n};\n\nexport type IgnoreMembership = {\n  __typename?: 'IgnoreMembership';\n  message?: Maybe<Scalars['String']>;\n  annotationId: Scalars['ID'];\n};\n\nexport type AnnotationNotFound = {\n  __typename?: 'AnnotationNotFound';\n  message?: Maybe<Scalars['String']>;\n  annotationId: Scalars['ID'];\n};\n\nexport type UpdateAnnotationMemberLastReadPayload = AnnotationMember | AnnotationNotFound | IgnoreMembership;\n\nexport type WithIndex<TObject> = TObject & Record<string, any>;\nexport type ResolversObject<TObject> = WithIndex<TObject>;\n\nexport type ResolverTypeWrapper<T> = Promise<T> | T;\n\n\nexport type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {\n  fragment: string;\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;\n};\n\nexport type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {\n  selectionSet: string;\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;\n};\nexport type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;\nexport type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =\n  | ResolverFn<TResult, TParent, TContext, TArgs>\n  | StitchingResolver<TResult, TParent, TContext, TArgs>;\n\nexport type ResolverFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => Promise<TResult> | TResult;\n\nexport type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;\n\nexport type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => TResult | Promise<TResult>;\n\nexport interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {\n  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;\n  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;\n}\n\nexport interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {\n  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;\n  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;\n}\n\nexport type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =\n  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>\n  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;\n\nexport type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =\n  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)\n  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;\n\nexport type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (\n  parent: TParent,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => Maybe<TTypes> | Promise<Maybe<TTypes>>;\n\nexport type IsTypeOfResolverFn<T = {}> = (obj: T, info: GraphQLResolveInfo) => boolean | Promise<boolean>;\n\nexport type NextResolverFn<T> = () => Promise<T>;\n\nexport type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (\n  next: NextResolverFn<TResult>,\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => TResult | Promise<TResult>;\n\n/** Mapping between all available schema types and the resolvers types */\nexport type ResolversTypes = ResolversObject<{\n  Date: ResolverTypeWrapper<Scalars['Date']>;\n  User: ResolverTypeWrapper<User>;\n  ID: ResolverTypeWrapper<Scalars['ID']>;\n  String: ResolverTypeWrapper<Scalars['String']>;\n  UserTypes: UserTypes;\n  OrderDirections: OrderDirections;\n  OrderTypes: OrderTypes;\n  Member: ResolversTypes['AnnotationMember'] | ResolversTypes['DocumentMember'];\n  AnnotationMember: ResolverTypeWrapper<AnnotationMember>;\n  DocumentMember: ResolverTypeWrapper<DocumentMember>;\n  Annotation: ResolverTypeWrapper<Annotation>;\n  Int: ResolverTypeWrapper<Scalars['Int']>;\n  Document: ResolverTypeWrapper<Document>;\n  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;\n  DeleteResult: ResolverTypeWrapper<DeleteResult>;\n  ConnectResult: ResolverTypeWrapper<ConnectResult>;\n  Mention: ResolverTypeWrapper<Mention>;\n  ScrollSyncPosition: ResolverTypeWrapper<ScrollSyncPosition>;\n  ScrollSyncResult: ResolverTypeWrapper<ScrollSyncResult>;\n  NewScrollPositionInput: NewScrollPositionInput;\n  NewAnnotationInput: NewAnnotationInput;\n  EditAnnotationInput: EditAnnotationInput;\n  NewAnnotationMemberInput: NewAnnotationMemberInput;\n  EditAnnotationMemberInput: EditAnnotationMemberInput;\n  NewDocumentMemberInput: NewDocumentMemberInput;\n  EditDocumentMemberInput: EditDocumentMemberInput;\n  NewDocumentInput: NewDocumentInput;\n  EditDocumentInput: EditDocumentInput;\n  NewUserInput: NewUserInput;\n  EditUserInput: EditUserInput;\n  InvitedUserInput: InvitedUserInput;\n  DeleteAnnotationMemberInput: DeleteAnnotationMemberInput;\n  DeleteDocumentMemberInput: DeleteDocumentMemberInput;\n  NewMentionInput: NewMentionInput;\n  EditMentionInput: EditMentionInput;\n  ConnectedDocUser: ResolverTypeWrapper<ConnectedDocUser>;\n  EditConnectedDocUserInput: EditConnectedDocUserInput;\n  DeleteConnectedDocUserInput: DeleteConnectedDocUserInput;\n  AuthUser: ResolverTypeWrapper<AuthUser>;\n  Query: ResolverTypeWrapper<{}>;\n  Mutation: ResolverTypeWrapper<{}>;\n  ChangeEventTypes: ChangeEventTypes;\n  AnnotationSubscriptionEvent: ResolverTypeWrapper<AnnotationSubscriptionEvent>;\n  DocumentSubscriptionEvent: ResolverTypeWrapper<DocumentSubscriptionEvent>;\n  MentionSubscriptionEvent: ResolverTypeWrapper<MentionSubscriptionEvent>;\n  ScrollPositionSubscriptionEvent: ResolverTypeWrapper<ScrollPositionSubscriptionEvent>;\n  ConnectedDocUsersSubscriptionEvent: ResolverTypeWrapper<ConnectedDocUsersSubscriptionEvent>;\n  Subscription: ResolverTypeWrapper<{}>;\n  AuthPayload: ResolverTypeWrapper<AuthPayload>;\n  IgnoreMembership: ResolverTypeWrapper<IgnoreMembership>;\n  AnnotationNotFound: ResolverTypeWrapper<AnnotationNotFound>;\n  UpdateAnnotationMemberLastReadPayload: ResolversTypes['AnnotationMember'] | ResolversTypes['AnnotationNotFound'] | ResolversTypes['IgnoreMembership'];\n}>;\n\n/** Mapping between all available schema types and the resolvers parents */\nexport type ResolversParentTypes = ResolversObject<{\n  Date: Scalars['Date'];\n  User: User;\n  ID: Scalars['ID'];\n  String: Scalars['String'];\n  Member: ResolversParentTypes['AnnotationMember'] | ResolversParentTypes['DocumentMember'];\n  AnnotationMember: AnnotationMember;\n  DocumentMember: DocumentMember;\n  Annotation: Annotation;\n  Int: Scalars['Int'];\n  Document: Document;\n  Boolean: Scalars['Boolean'];\n  DeleteResult: DeleteResult;\n  ConnectResult: ConnectResult;\n  Mention: Mention;\n  ScrollSyncPosition: ScrollSyncPosition;\n  ScrollSyncResult: ScrollSyncResult;\n  NewScrollPositionInput: NewScrollPositionInput;\n  NewAnnotationInput: NewAnnotationInput;\n  EditAnnotationInput: EditAnnotationInput;\n  NewAnnotationMemberInput: NewAnnotationMemberInput;\n  EditAnnotationMemberInput: EditAnnotationMemberInput;\n  NewDocumentMemberInput: NewDocumentMemberInput;\n  EditDocumentMemberInput: EditDocumentMemberInput;\n  NewDocumentInput: NewDocumentInput;\n  EditDocumentInput: EditDocumentInput;\n  NewUserInput: NewUserInput;\n  EditUserInput: EditUserInput;\n  InvitedUserInput: InvitedUserInput;\n  DeleteAnnotationMemberInput: DeleteAnnotationMemberInput;\n  DeleteDocumentMemberInput: DeleteDocumentMemberInput;\n  NewMentionInput: NewMentionInput;\n  EditMentionInput: EditMentionInput;\n  ConnectedDocUser: ConnectedDocUser;\n  EditConnectedDocUserInput: EditConnectedDocUserInput;\n  DeleteConnectedDocUserInput: DeleteConnectedDocUserInput;\n  AuthUser: AuthUser;\n  Query: {};\n  Mutation: {};\n  AnnotationSubscriptionEvent: AnnotationSubscriptionEvent;\n  DocumentSubscriptionEvent: DocumentSubscriptionEvent;\n  MentionSubscriptionEvent: MentionSubscriptionEvent;\n  ScrollPositionSubscriptionEvent: ScrollPositionSubscriptionEvent;\n  ConnectedDocUsersSubscriptionEvent: ConnectedDocUsersSubscriptionEvent;\n  Subscription: {};\n  AuthPayload: AuthPayload;\n  IgnoreMembership: IgnoreMembership;\n  AnnotationNotFound: AnnotationNotFound;\n  UpdateAnnotationMemberLastReadPayload: ResolversParentTypes['AnnotationMember'] | ResolversParentTypes['AnnotationNotFound'] | ResolversParentTypes['IgnoreMembership'];\n}>;\n\nexport interface DateScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Date'], any> {\n  name: 'Date';\n}\n\nexport type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = ResolversObject<{\n  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  type?: Resolver<ResolversTypes['UserTypes'], ParentType, ContextType>;\n  userName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  updatedAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  documents?: Resolver<Array<ResolversTypes['Document']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type MemberResolvers<ContextType = any, ParentType extends ResolversParentTypes['Member'] = ResolversParentTypes['Member']> = ResolversObject<{\n  __resolveType: TypeResolveFn<'AnnotationMember' | 'DocumentMember', ParentType, ContextType>;\n  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  documentId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  lastRead?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n}>;\n\nexport type AnnotationMemberResolvers<ContextType = any, ParentType extends ResolversParentTypes['AnnotationMember'] = ResolversParentTypes['AnnotationMember']> = ResolversObject<{\n  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  documentId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  annotationId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  lastRead?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  updatedAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  annotationCreatedAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type DocumentMemberResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocumentMember'] = ResolversParentTypes['DocumentMember']> = ResolversObject<{\n  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  user?: Resolver<ResolversTypes['User'], ParentType, ContextType>;\n  documentId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  lastRead?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  updatedAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type AnnotationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Annotation'] = ResolversParentTypes['Annotation']> = ResolversObject<{\n  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  xfdf?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  annotContents?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  author?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;\n  documentId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  pageNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  updatedAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  membership?: Resolver<Maybe<ResolversTypes['AnnotationMember']>, ParentType, ContextType>;\n  mentions?: Resolver<Array<ResolversTypes['Mention']>, ParentType, ContextType>;\n  inReplyTo?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type DocumentResolvers<ContextType = any, ParentType extends ResolversParentTypes['Document'] = ResolversParentTypes['Document']> = ResolversObject<{\n  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  annotations?: Resolver<Array<ResolversTypes['Annotation']>, ParentType, ContextType>;\n  members?: Resolver<Array<ResolversTypes['DocumentMember']>, ParentType, ContextType>;\n  authorId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  updatedAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  isPublic?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;\n  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  unreadCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type DeleteResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteResult'] = ResolversParentTypes['DeleteResult']> = ResolversObject<{\n  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;\n  successful?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type ConnectResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConnectResult'] = ResolversParentTypes['ConnectResult']> = ResolversObject<{\n  userId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;\n  documentId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;\n  successful?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type MentionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mention'] = ResolversParentTypes['Mention']> = ResolversObject<{\n  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  annotationId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  documentId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  mentionedUser?: Resolver<ResolversTypes['User'], ParentType, ContextType>;\n  readBeforeMention?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;\n  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  updatedAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type ScrollSyncPositionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScrollSyncPosition'] = ResolversParentTypes['ScrollSyncPosition']> = ResolversObject<{\n  scrollTop?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  scrollHeight?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type ScrollSyncResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScrollSyncResult'] = ResolversParentTypes['ScrollSyncResult']> = ResolversObject<{\n  position?: Resolver<Maybe<ResolversTypes['ScrollSyncPosition']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type ConnectedDocUserResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConnectedDocUser'] = ResolversParentTypes['ConnectedDocUser']> = ResolversObject<{\n  userId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  currentPage?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type AuthUserResolvers<ContextType = any, ParentType extends ResolversParentTypes['AuthUser'] = ResolversParentTypes['AuthUser']> = ResolversObject<{\n  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  userName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{\n  user?: Resolver<ResolversTypes['User'], ParentType, ContextType, RequireFields<QueryUserArgs, 'id'>>;\n  annotation?: Resolver<Maybe<ResolversTypes['Annotation']>, ParentType, ContextType, RequireFields<QueryAnnotationArgs, 'id'>>;\n  annotations?: Resolver<Array<ResolversTypes['Annotation']>, ParentType, ContextType, RequireFields<QueryAnnotationsArgs, 'documentId'>>;\n  document?: Resolver<Maybe<ResolversTypes['Document']>, ParentType, ContextType, RequireFields<QueryDocumentArgs, 'id'>>;\n  documents?: Resolver<Array<ResolversTypes['Document']>, ParentType, ContextType, RequireFields<QueryDocumentsArgs, 'userId' | 'limit'>>;\n  session?: Resolver<Maybe<ResolversTypes['AuthUser']>, ParentType, ContextType>;\n  mentions?: Resolver<Array<ResolversTypes['Mention']>, ParentType, ContextType, RequireFields<QueryMentionsArgs, 'annotationId'>>;\n  isScrollSyncAvailable?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<QueryIsScrollSyncAvailableArgs, 'userId' | 'documentId'>>;\n  scrollSyncPosition?: Resolver<Maybe<ResolversTypes['ScrollSyncResult']>, ParentType, ContextType, RequireFields<QueryScrollSyncPositionArgs, 'documentId'>>;\n  connectedDocUsers?: Resolver<Array<ResolversTypes['ConnectedDocUser']>, ParentType, ContextType, RequireFields<QueryConnectedDocUsersArgs, 'documentId'>>;\n}>;\n\nexport type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = ResolversObject<{\n  addAnnotation?: Resolver<ResolversTypes['Annotation'], ParentType, ContextType, RequireFields<MutationAddAnnotationArgs, 'input'>>;\n  editAnnotation?: Resolver<ResolversTypes['Annotation'], ParentType, ContextType, RequireFields<MutationEditAnnotationArgs, 'id' | 'input'>>;\n  deleteAnnotation?: Resolver<ResolversTypes['DeleteResult'], ParentType, ContextType, RequireFields<MutationDeleteAnnotationArgs, 'id'>>;\n  addAnnotationMember?: Resolver<ResolversTypes['AnnotationMember'], ParentType, ContextType, RequireFields<MutationAddAnnotationMemberArgs, 'input'>>;\n  editAnnotationMember?: Resolver<ResolversTypes['AnnotationMember'], ParentType, ContextType, RequireFields<MutationEditAnnotationMemberArgs, 'annotationId' | 'userId'>>;\n  updateAnnotationMemberLastRead?: Resolver<ResolversTypes['UpdateAnnotationMemberLastReadPayload'], ParentType, ContextType, RequireFields<MutationUpdateAnnotationMemberLastReadArgs, 'annotationId' | 'userId'>>;\n  deleteAnnotationMember?: Resolver<ResolversTypes['DeleteResult'], ParentType, ContextType, RequireFields<MutationDeleteAnnotationMemberArgs, 'input'>>;\n  addDocument?: Resolver<ResolversTypes['Document'], ParentType, ContextType, RequireFields<MutationAddDocumentArgs, 'document'>>;\n  inviteUsersToDocument?: Resolver<ResolversTypes['Document'], ParentType, ContextType, RequireFields<MutationInviteUsersToDocumentArgs, 'id'>>;\n  editDocument?: Resolver<ResolversTypes['Document'], ParentType, ContextType, RequireFields<MutationEditDocumentArgs, 'id'>>;\n  deleteDocument?: Resolver<ResolversTypes['DeleteResult'], ParentType, ContextType, RequireFields<MutationDeleteDocumentArgs, 'id'>>;\n  addDocumentMember?: Resolver<ResolversTypes['DocumentMember'], ParentType, ContextType, RequireFields<MutationAddDocumentMemberArgs, 'input'>>;\n  editDocumentMember?: Resolver<ResolversTypes['DocumentMember'], ParentType, ContextType, RequireFields<MutationEditDocumentMemberArgs, 'documentId' | 'userId'>>;\n  deleteDocumentMember?: Resolver<ResolversTypes['DeleteResult'], ParentType, ContextType, RequireFields<MutationDeleteDocumentMemberArgs, 'input'>>;\n  addUser?: Resolver<ResolversTypes['User'], ParentType, ContextType, RequireFields<MutationAddUserArgs, 'input'>>;\n  login?: Resolver<ResolversTypes['AuthPayload'], ParentType, ContextType, RequireFields<MutationLoginArgs, never>>;\n  loginAnonymous?: Resolver<ResolversTypes['AuthPayload'], ParentType, ContextType, RequireFields<MutationLoginAnonymousArgs, never>>;\n  endSession?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;\n  addMention?: Resolver<ResolversTypes['Mention'], ParentType, ContextType, RequireFields<MutationAddMentionArgs, never>>;\n  editMention?: Resolver<ResolversTypes['Mention'], ParentType, ContextType, RequireFields<MutationEditMentionArgs, 'userId' | 'annotationId'>>;\n  deleteMention?: Resolver<ResolversTypes['DeleteResult'], ParentType, ContextType, RequireFields<MutationDeleteMentionArgs, 'userId' | 'annotationId'>>;\n  markAllAsRead?: Resolver<ResolversTypes['Document'], ParentType, ContextType, RequireFields<MutationMarkAllAsReadArgs, never>>;\n  editScrollSync?: Resolver<ResolversTypes['ScrollSyncResult'], ParentType, ContextType, RequireFields<MutationEditScrollSyncArgs, 'documentId' | 'userId' | 'position'>>;\n  deleteScrollSync?: Resolver<ResolversTypes['DeleteResult'], ParentType, ContextType, RequireFields<MutationDeleteScrollSyncArgs, 'documentId'>>;\n  connectUserToDocument?: Resolver<ResolversTypes['ConnectResult'], ParentType, ContextType, RequireFields<MutationConnectUserToDocumentArgs, 'documentId' | 'userId'>>;\n  editConnectedDocUser?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConnectedDocUser']>>>, ParentType, ContextType, RequireFields<MutationEditConnectedDocUserArgs, 'input'>>;\n  deleteConnectedDocUser?: Resolver<ResolversTypes['DeleteResult'], ParentType, ContextType, RequireFields<MutationDeleteConnectedDocUserArgs, 'input'>>;\n}>;\n\nexport type AnnotationSubscriptionEventResolvers<ContextType = any, ParentType extends ResolversParentTypes['AnnotationSubscriptionEvent'] = ResolversParentTypes['AnnotationSubscriptionEvent']> = ResolversObject<{\n  annotation?: Resolver<ResolversTypes['Annotation'], ParentType, ContextType>;\n  document?: Resolver<Maybe<ResolversTypes['Document']>, ParentType, ContextType>;\n  action?: Resolver<ResolversTypes['ChangeEventTypes'], ParentType, ContextType>;\n  markedAsRead?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;\n  mentionedCurrentUser?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type DocumentSubscriptionEventResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocumentSubscriptionEvent'] = ResolversParentTypes['DocumentSubscriptionEvent']> = ResolversObject<{\n  document?: Resolver<ResolversTypes['Document'], ParentType, ContextType>;\n  markedAllAsRead?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;\n  action?: Resolver<ResolversTypes['ChangeEventTypes'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type MentionSubscriptionEventResolvers<ContextType = any, ParentType extends ResolversParentTypes['MentionSubscriptionEvent'] = ResolversParentTypes['MentionSubscriptionEvent']> = ResolversObject<{\n  mention?: Resolver<ResolversTypes['Mention'], ParentType, ContextType>;\n  action?: Resolver<ResolversTypes['ChangeEventTypes'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type ScrollPositionSubscriptionEventResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScrollPositionSubscriptionEvent'] = ResolversParentTypes['ScrollPositionSubscriptionEvent']> = ResolversObject<{\n  documentId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  position?: Resolver<Maybe<ResolversTypes['ScrollSyncPosition']>, ParentType, ContextType>;\n  action?: Resolver<ResolversTypes['ChangeEventTypes'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type ConnectedDocUsersSubscriptionEventResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConnectedDocUsersSubscriptionEvent'] = ResolversParentTypes['ConnectedDocUsersSubscriptionEvent']> = ResolversObject<{\n  documentId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  connectedDocUsers?: Resolver<Array<ResolversTypes['ConnectedDocUser']>, ParentType, ContextType>;\n  action?: Resolver<ResolversTypes['ChangeEventTypes'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type SubscriptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Subscription'] = ResolversParentTypes['Subscription']> = ResolversObject<{\n  annotationChanged?: SubscriptionResolver<ResolversTypes['AnnotationSubscriptionEvent'], \"annotationChanged\", ParentType, ContextType, RequireFields<SubscriptionAnnotationChangedArgs, 'userId'>>;\n  documentChanged?: SubscriptionResolver<ResolversTypes['DocumentSubscriptionEvent'], \"documentChanged\", ParentType, ContextType, RequireFields<SubscriptionDocumentChangedArgs, 'userId'>>;\n  mentionChanged?: SubscriptionResolver<ResolversTypes['MentionSubscriptionEvent'], \"mentionChanged\", ParentType, ContextType, RequireFields<SubscriptionMentionChangedArgs, 'userId'>>;\n  scrollPositionChanged?: SubscriptionResolver<ResolversTypes['ScrollPositionSubscriptionEvent'], \"scrollPositionChanged\", ParentType, ContextType, RequireFields<SubscriptionScrollPositionChangedArgs, 'docId'>>;\n  connectedDocUsersChanged?: SubscriptionResolver<ResolversTypes['ConnectedDocUsersSubscriptionEvent'], \"connectedDocUsersChanged\", ParentType, ContextType, RequireFields<SubscriptionConnectedDocUsersChangedArgs, 'docId'>>;\n}>;\n\nexport type AuthPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['AuthPayload'] = ResolversParentTypes['AuthPayload']> = ResolversObject<{\n  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type IgnoreMembershipResolvers<ContextType = any, ParentType extends ResolversParentTypes['IgnoreMembership'] = ResolversParentTypes['IgnoreMembership']> = ResolversObject<{\n  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  annotationId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type AnnotationNotFoundResolvers<ContextType = any, ParentType extends ResolversParentTypes['AnnotationNotFound'] = ResolversParentTypes['AnnotationNotFound']> = ResolversObject<{\n  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  annotationId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>;\n}>;\n\nexport type UpdateAnnotationMemberLastReadPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateAnnotationMemberLastReadPayload'] = ResolversParentTypes['UpdateAnnotationMemberLastReadPayload']> = ResolversObject<{\n  __resolveType: TypeResolveFn<'AnnotationMember' | 'AnnotationNotFound' | 'IgnoreMembership', ParentType, ContextType>;\n}>;\n\nexport type Resolvers<ContextType = any> = ResolversObject<{\n  Date?: GraphQLScalarType;\n  User?: UserResolvers<ContextType>;\n  Member?: MemberResolvers<ContextType>;\n  AnnotationMember?: AnnotationMemberResolvers<ContextType>;\n  DocumentMember?: DocumentMemberResolvers<ContextType>;\n  Annotation?: AnnotationResolvers<ContextType>;\n  Document?: DocumentResolvers<ContextType>;\n  DeleteResult?: DeleteResultResolvers<ContextType>;\n  ConnectResult?: ConnectResultResolvers<ContextType>;\n  Mention?: MentionResolvers<ContextType>;\n  ScrollSyncPosition?: ScrollSyncPositionResolvers<ContextType>;\n  ScrollSyncResult?: ScrollSyncResultResolvers<ContextType>;\n  ConnectedDocUser?: ConnectedDocUserResolvers<ContextType>;\n  AuthUser?: AuthUserResolvers<ContextType>;\n  Query?: QueryResolvers<ContextType>;\n  Mutation?: MutationResolvers<ContextType>;\n  AnnotationSubscriptionEvent?: AnnotationSubscriptionEventResolvers<ContextType>;\n  DocumentSubscriptionEvent?: DocumentSubscriptionEventResolvers<ContextType>;\n  MentionSubscriptionEvent?: MentionSubscriptionEventResolvers<ContextType>;\n  ScrollPositionSubscriptionEvent?: ScrollPositionSubscriptionEventResolvers<ContextType>;\n  ConnectedDocUsersSubscriptionEvent?: ConnectedDocUsersSubscriptionEventResolvers<ContextType>;\n  Subscription?: SubscriptionResolvers<ContextType>;\n  AuthPayload?: AuthPayloadResolvers<ContextType>;\n  IgnoreMembership?: IgnoreMembershipResolvers<ContextType>;\n  AnnotationNotFound?: AnnotationNotFoundResolvers<ContextType>;\n  UpdateAnnotationMemberLastReadPayload?: UpdateAnnotationMemberLastReadPayloadResolvers<ContextType>;\n}>;\n\n\n/**\n * @deprecated\n * Use \"Resolvers\" root object instead. If you wish to get \"IResolvers\", add \"typesPrefix: I\" to your config.\n */\nexport type IResolvers<ContextType = any> = Resolvers<ContextType>;\n"},"lineCount":null}},"error":null,"hash":"59e9ec937469c9b9e82fc1888c430e03","cacheData":{"env":{}}}