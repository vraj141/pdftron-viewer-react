import { upAll as composeUpAll } from 'docker-compose';
import path from 'path';
import fs from 'fs';
import pg from 'pg';
const { Client } = pg;

const username = 'postgres';
const host = '127.0.0.1';
const port = 5432;
const password = 'pdftron';
const dbName = 'resolver_test';

const createDatabaseQuery = `CREATE DATABASE ${dbName}`;
const dropDatabaseQuery = `DROP DATABASE IF EXISTS ${dbName}`;
const initDatabaseQuery = fs
  .readFileSync(`${__dirname}/../../packages/collab-db-postgresql/scripts/init_database.sql`)
  .toString();

const createDatabase = async () => {
  const client = new Client({
    user: username,
    host,
    password,
    port
  });
  try {
    await client.connect();
    console.log('--> Postgres Database connected');
    try {
      await client.query(dropDatabaseQuery);
      await client.query(createDatabaseQuery);
      console.log(`--> ${dbName} Database created.`);
      client.end();
    } catch (err) {
      client.end();
      console.error(err.stack);
    }
  } catch (err) {
    console.error('Postgres Database connection error', err.stack);
    process.exit();
  }
};

const createSchema = async () => {
  const newDatabaseClient = new Client({
    user: username,
    host,
    database: dbName,
    password,
    port
  });

  try {
    await newDatabaseClient.connect();
    try {
      console.log(`--> ${dbName} Database connected`);
      await newDatabaseClient.query(initDatabaseQuery);
      console.log(`--> Initialized ${dbName} with default schema.`);
      newDatabaseClient.end();
    } catch (err) {
      newDatabaseClient.end();
      console.error(err.stack);
      // process.exit();
    }
  } catch (err) {
    console.error(`${dbName} Database connection error`, err.stack);
    process.exit();
  }
};

const startDocker = async () => {
  try {
    await composeUpAll({ cwd: path.join(__dirname), log: true });
    console.log('Local Database Started.');
  } catch (error) {
    console.log('Error on start docker container:', error.message);
  }
};

const delay = (t: number) => new Promise((resolve) => setTimeout(resolve, t));
module.exports = async () => {
  await startDocker();
  // wait docker start pg container
  await delay(2000);
  await createDatabase();
  await createSchema();
};
