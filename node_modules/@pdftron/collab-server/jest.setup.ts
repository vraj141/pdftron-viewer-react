import { Context, UserResolvers } from './src/index';
import ConnectedUserMap from './src/util/ConnectedUserMap';
import { setPermissions } from './src/util/permission';
import { EmailManager } from './src/email/EmailManager';
import { UserTypes } from '../../types/resolvers-types';
import { setupLogger } from '../../shared/log/logger';
setupLogger('none', null);

export const testUserId = '1';
export const testDocId = '2';
export const testAnnotationId = '3';
export const testAnnotationMemberId = '4';
export const testDocumentMemberId = '5';
export const testMentionId = '6';

export const sampleUser = {
  id: testUserId,
  userName: 'test',
  email: 'test@pdftron.com',
  type: 'STANDARD' as UserTypes,
  customData: null,
  createdAt: Date.now(),
  updatedAt: Date.now()
};

export const sampleAnnotation = {
  id: testAnnotationId,
  xfdf: 'test',
  authorId: testUserId,
  documentId: testDocId,
  pageNumber: 1,
  inReplyTo: null,
  createdAt: Date.now(),
  updatedAt: Date.now()
};

export const sampleDocument = {
  id: testDocId,
  authorId: testUserId,
  isPublic: true,
  name: 'testEdit.pdf',
  createdAt: Date.now(),
  updatedAt: Date.now()
};

export const sampleDocumentMember = {
  id: testDocumentMemberId,
  userId: testUserId,
  documentId: testDocId,
  lastRead: Date.now(),
  createdAt: Date.now(),
  updatedAt: Date.now()
};

export const sampleAnnotationMember = {
  id: testAnnotationMemberId,
  userId: testUserId,
  documentId: testDocId,
  annotationId: testAnnotationId,
  lastRead: Date.now(),
  permission: 'READ',
  createdAt: Date.now(),
  updatedAt: Date.now(),
  annotationCreatedAt: Date.now()
};

export const sampleMention = {
  id: testMentionId,
  userId: testUserId,
  documentId: testDocId,
  annotationId: testAnnotationId,
  readBeforeMention: null,
  createdAt: Date.now(),
  updatedAt: Date.now(),
}

export const sampleScrollSyncPosition = {
  scrollHeight: 1200,
  scrollTop: 500
}

export const resolvers = {
  Query: {
    user: jest.fn(() => sampleUser),
    userWithEmail: jest.fn(() => sampleUser),
    annotations: jest.fn(() => [sampleAnnotation]),
    annotationMembers: jest.fn(() => [sampleAnnotationMember]),
    documents: jest.fn(() => [sampleDocument]),
    documentMembers: jest.fn(() => [sampleDocumentMember]),
    mentions: jest.fn(() => []),
    annotationCount: jest.fn(() => 1),
    annotationMemberCount: jest.fn(() => 1)
  },
  Mutation: {
    addUser: jest.fn(),
    addAnnotation: jest.fn((annotation) => ({ ...sampleAnnotation, ...annotation })),
    editAnnotation: jest.fn((id, input) => ({ ...sampleAnnotation, ...input })),
    deleteAnnotation: jest.fn(() => ({ successful: true })),
    addDocument: jest.fn((document) => ({ ...sampleDocument, ...document })),
    editDocument: jest.fn((id, input) => ({ ...sampleDocument, ...input })),
    deleteDocument: jest.fn(() => ({ successful: true })),
    addDocumentMember: jest.fn(() => sampleDocumentMember),
    editDocumentMember: jest.fn((id, input) => ({ ...sampleDocumentMember, ...input })),
    deleteDocumentMember: jest.fn(() => ({ successful: true })),
    addAnnotationMember: jest.fn(() => sampleAnnotationMember),
    editAnnotationMember: jest.fn((id, input) => ({ ...sampleAnnotationMember, ...input })),
    deleteAnnotationMember: jest.fn(() => ({ successful: true })),
    addMention: jest.fn(() => sampleMention),
    editMention: jest.fn((id, input) => ({ ...sampleMention, ...input })),
    deleteMention: jest.fn(() => ({ successful: true }))
  }
} as UserResolvers;

export const mockPubsub = {
  publish: jest.fn(() => null)
};

const pubsub = mockPubsub;
const emailManager = new EmailManager({});
const user = { id: '1', userName: 'test' };
export const connectedUsers = new ConnectedUserMap();
const jwtCookieName = 'wv-collab-token';

export const context = ({
  user,
  connectedUsers,
  resolvers,
  pubsub,
  emailManager,
  jwtCookieName,
  subscriptionFields: {},
  res: {
    cookie: jest.fn(() => null),
    clearCookie: jest.fn(() => null)
  }
} as unknown) as Context;

export const getPermissionSetting = (permissions) => {
  const permSetting = setPermissions(permissions);
  return {
    document: permSetting.document,
    annotation: permSetting.annotation
  };
};
