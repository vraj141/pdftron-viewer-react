{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\src\\\\App.js\";\n\nimport React, { useRef, useEffect } from 'react';\nimport WebViewer from '@pdftron/webviewer';\nimport './App.css';\n\nvar App = function App(props) {\n  var viewer = useRef(null); ///////////////////////////////////////////////////////////////////////////\n\n  useEffect(function () {\n    WebViewer({\n      path: '/webviewer/lib',\n      initialDoc: props.pdfUrl\n    }, viewer.current).then(function (instance) {\n      instance.setTheme('dark');\n      var docViewer = instance.docViewer,\n          Annotations = instance.Annotations;\n      var annotManager = docViewer.getAnnotationManager(); // get all annotation and form data\n      // you might call this when you want to pass the XFDF data to your server to be saved\n      // or you may want to pass an XFDF string to doc.getFileData to embed the annotations\n      // in the downloaded PDF\n      ///////////////////////////////////////////////////\n      ///save button header\n\n      instance.setHeaderItems(function (header) {\n        header.push({\n          type: 'actionButton',\n          img: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"/></svg>',\n          onClick: function () {\n            var _onClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              var doc, xfdfString, saveOptions, options, data, arr, blob;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.t0 = console;\n                      _context.next = 3;\n                      return annotManager.exportAnnotations({\n                        links: false,\n                        widgets: false\n                      });\n\n                    case 3:\n                      _context.t1 = _context.sent;\n\n                      _context.t0.log.call(_context.t0, _context.t1);\n\n                      // save the annotations\n                      //////////////\n                      doc = docViewer.getDocument();\n                      _context.next = 8;\n                      return annotManager.exportAnnotations();\n\n                    case 8:\n                      xfdfString = _context.sent;\n                      saveOptions = CoreControls.SaveOptions;\n                      options = {\n                        xfdfString: xfdfString,\n                        flags: saveOptions.LINEARIZED,\n                        downloadType: 'pdf'\n                      };\n                      _context.next = 13;\n                      return doc.getFileData(options);\n\n                    case 13:\n                      data = _context.sent;\n                      arr = new Uint8Array(data);\n                      blob = new Blob([arr], {\n                        type: 'application/pdf'\n                      });\n\n                    case 16:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            function onClick() {\n              return _onClick.apply(this, arguments);\n            }\n\n            return onClick;\n          }()\n        });\n      }); //////////////////////////\n\n      docViewer.on('documentLoaded', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var doc, xfdfString, options, data, arr, blob, rectangleAnnot;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                doc = docViewer.getDocument();\n                _context2.next = 3;\n                return annotManager.exportAnnotations();\n\n              case 3:\n                xfdfString = _context2.sent;\n                options = {\n                  xfdfString: xfdfString\n                };\n                _context2.next = 7;\n                return doc.getFileData(options);\n\n              case 7:\n                data = _context2.sent;\n                arr = new Uint8Array(data);\n                blob = new Blob([arr], {\n                  type: 'application/pdf'\n                }); ///////////////////////\n                //////////////\n\n                rectangleAnnot = new Annotations.RectangleAnnotation();\n                rectangleAnnot.PageNumber = 1; // values are in page coordinates with (0, 0) in the top left\n\n                rectangleAnnot.X = 50;\n                rectangleAnnot.Y = 50;\n                rectangleAnnot.Width = 100;\n                rectangleAnnot.Height = 50;\n                rectangleAnnot.Author = annotManager.getCurrentUser();\n                annotManager.addAnnotation(rectangleAnnot); // need to draw the annotation otherwise it won't show up until the page is refreshed\n\n                annotManager.redrawAnnotation(rectangleAnnot);\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })));\n    });\n  }, []); // }\n  ////////////////////////gazab bhai mara https://www.pdftron.com/documentation/web/guides/get-file-data-with-viewer/\n  // useEffect(() => {\n  //     WebViewer(\n  //       {\n  //         path: '/webviewer/lib',\n  //         initialDoc: props.pdfUrl,\n  //       },\n  //       viewer.current,\n  //     )\n  //   .then(instance => {\n  //     const { docViewer, annotManager, CoreControls } = instance;\n  //     ///////////////////////////////////////////\n  //     docViewer.on('documentLoaded', async () => {\n  //       const doc = docViewer.getDocument();\n  //       const xfdfString = await annotManager.exportAnnotations();\n  //       const options = { xfdfString };\n  //       const data = await doc.getFileData(options);\n  //       const arr = new Uint8Array(data);\n  //       const blob = new Blob([arr], { type: 'application/pdf' });\n  //       // upload blob to your server\n  //     });\n  //     ////////////////////////////////////\n  //     // Add header button that will get file data on click\n  //     instance.setHeaderItems(header => {\n  //       header.push({\n  //           type: 'actionButton',\n  //           img: '...',\n  //           onClick: async () => {\n  //             const doc = docViewer.getDocument();\n  //             const xfdfString = await annotManager.exportAnnotations();\n  //             const saveOptions = CoreControls.SaveOptions;\n  //             const options = {\n  //               xfdfString,\n  //               flags: saveOptions.LINEARIZED,\n  //               downloadType: 'pdf'\n  //             };\n  //             const data = await doc.getFileData(options);\n  //             const arr = new Uint8Array(data);\n  //             const blob = new Blob([arr], { type: 'application/pdf' });\n  //             // add code for handling Blob here\n  //           }\n  //       });\n  //     });\n  //   });\n  //       });\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, \"React sample\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"webviewer\",\n    ref: viewer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/vrajs/Desktop/firebase-file-upload-pdftron-reactjs/src/App.js"],"names":["React","useRef","useEffect","WebViewer","App","props","viewer","path","initialDoc","pdfUrl","current","then","instance","setTheme","docViewer","Annotations","annotManager","getAnnotationManager","setHeaderItems","header","push","type","img","onClick","console","exportAnnotations","links","widgets","log","doc","getDocument","xfdfString","saveOptions","CoreControls","SaveOptions","options","flags","LINEARIZED","downloadType","getFileData","data","arr","Uint8Array","blob","Blob","on","rectangleAnnot","RectangleAnnotation","PageNumber","X","Y","Width","Height","Author","getCurrentUser","addAnnotation","redrawAnnotation"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAO,WAAP;;AAKA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,KAAD,EAAW;AACrB,MAAMC,MAAM,GAAGL,MAAM,CAAC,IAAD,CAArB,CADqB,CAIrB;;AACEC,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,SAAS,CACP;AACEI,MAAAA,IAAI,EAAE,gBADR;AAEEC,MAAAA,UAAU,EAAEH,KAAK,CAACI;AAFpB,KADO,EAKPH,MAAM,CAACI,OALA,CAAT,CAMEC,IANF,CAMO,UAACC,QAAD,EAAc;AACnBA,MAAAA,QAAQ,CAACC,QAAT,CAAkB,MAAlB;AADmB,UAEXC,SAFW,GAEgBF,QAFhB,CAEXE,SAFW;AAAA,UAEAC,WAFA,GAEgBH,QAFhB,CAEAG,WAFA;AAGnB,UAAMC,YAAY,GAAGF,SAAS,CAACG,oBAAV,EAArB,CAHmB,CAMnB;AACA;AACA;AACA;AAKC;AACA;;AACAL,MAAAA,QAAQ,CAACM,cAAT,CAAwB,UAAAC,MAAM,EAAI;AACjCA,QAAAA,MAAM,CAACC,IAAP,CAAY;AACVC,UAAAA,IAAI,EAAE,cADI;AAEVC,UAAAA,GAAG,EAAE,mQAFK;AAGVC,UAAAA,OAAO;AAAA,oFAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCACPC,OADO;AAAA;AAAA,6BACWR,YAAY,CAACS,iBAAb,CAA+B;AAAEC,wBAAAA,KAAK,EAAE,KAAT;AAAgBC,wBAAAA,OAAO,EAAE;AAAzB,uBAA/B,CADX;;AAAA;AAAA;;AAAA,kCACCC,GADD;;AAEP;AACA;AACMC,sBAAAA,GAJC,GAIKf,SAAS,CAACgB,WAAV,EAJL;AAAA;AAAA,6BAKgBd,YAAY,CAACS,iBAAb,EALhB;;AAAA;AAKHM,sBAAAA,UALG;AAMHC,sBAAAA,WANG,GAMWC,YAAY,CAACC,WANxB;AAOHC,sBAAAA,OAPG,GAOO;AACdJ,wBAAAA,UAAU,EAAVA,UADc;AAEdK,wBAAAA,KAAK,EAAEJ,WAAW,CAACK,UAFL;AAGdC,wBAAAA,YAAY,EAAE;AAHA,uBAPP;AAAA;AAAA,6BAYUT,GAAG,CAACU,WAAJ,CAAgBJ,OAAhB,CAZV;;AAAA;AAYHK,sBAAAA,IAZG;AAaHC,sBAAAA,GAbG,GAaG,IAAIC,UAAJ,CAAeF,IAAf,CAbH;AAcHG,sBAAAA,IAdG,GAcI,IAAIC,IAAJ,CAAS,CAACH,GAAD,CAAT,EAAgB;AAAEpB,wBAAAA,IAAI,EAAE;AAAR,uBAAhB,CAdJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAHG,SAAZ;AAqBD,OAtBA,EAhBkB,CA0ClB;;AAGDP,MAAAA,SAAS,CAAC+B,EAAV,CAAa,gBAAb,wEAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBhB,gBAAAA,GADsB,GAChBf,SAAS,CAACgB,WAAV,EADgB;AAAA;AAAA,uBAEPd,YAAY,CAACS,iBAAb,EAFO;;AAAA;AAE1BM,gBAAAA,UAF0B;AAG1BI,gBAAAA,OAH0B,GAGhB;AAAEJ,kBAAAA,UAAU,EAAVA;AAAF,iBAHgB;AAAA;AAAA,uBAIbF,GAAG,CAACU,WAAJ,CAAgBJ,OAAhB,CAJa;;AAAA;AAI1BK,gBAAAA,IAJ0B;AAK1BC,gBAAAA,GAL0B,GAKpB,IAAIC,UAAJ,CAAeF,IAAf,CALoB;AAM1BG,gBAAAA,IAN0B,GAMnB,IAAIC,IAAJ,CAAS,CAACH,GAAD,CAAT,EAAgB;AAAEpB,kBAAAA,IAAI,EAAE;AAAR,iBAAhB,CANmB,EAOhC;AAEA;;AACUyB,gBAAAA,cAVsB,GAUL,IAAI/B,WAAW,CAACgC,mBAAhB,EAVK;AAW5BD,gBAAAA,cAAc,CAACE,UAAf,GAA4B,CAA5B,CAX4B,CAY5B;;AACAF,gBAAAA,cAAc,CAACG,CAAf,GAAmB,EAAnB;AACAH,gBAAAA,cAAc,CAACI,CAAf,GAAmB,EAAnB;AACAJ,gBAAAA,cAAc,CAACK,KAAf,GAAuB,GAAvB;AACAL,gBAAAA,cAAc,CAACM,MAAf,GAAwB,EAAxB;AACAN,gBAAAA,cAAc,CAACO,MAAf,GAAwBrC,YAAY,CAACsC,cAAb,EAAxB;AAGAtC,gBAAAA,YAAY,CAACuC,aAAb,CAA2BT,cAA3B,EApB4B,CAqB5B;;AACA9B,gBAAAA,YAAY,CAACwC,gBAAb,CAA8BV,cAA9B;;AAtB4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA9B;AA0BD,KA7ED;AA8ED,GA/EQ,EA+EN,EA/EM,CAAT,CALmB,CAqFrB;AAGF;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAGE;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,GAAG,EAAExC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CApJD;;AAsJA,eAAeF,GAAf","sourcesContent":["import React, { useRef, useEffect} from 'react';\nimport WebViewer from '@pdftron/webviewer';\nimport './App.css';\n \n\n\n\nconst App = (props) => {\n  const viewer = useRef(null);\n \n   \n  ///////////////////////////////////////////////////////////////////////////\n    useEffect(() => {\n      WebViewer(\n        {\n          path: '/webviewer/lib',\n          initialDoc: props.pdfUrl,\n        },  \n        viewer.current,\n      ).then((instance) => {\n        instance.setTheme('dark');\n        const { docViewer, Annotations } = instance;\n        const annotManager = docViewer.getAnnotationManager();\n         \n\n        // get all annotation and form data\n        // you might call this when you want to pass the XFDF data to your server to be saved\n        // or you may want to pass an XFDF string to doc.getFileData to embed the annotations\n        // in the downloaded PDF\n      \n        \n    \n\n         ///////////////////////////////////////////////////\n         ///save button header\n         instance.setHeaderItems(header => {\n          header.push({\n            type: 'actionButton',\n            img: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"/></svg>',\n            onClick: async() => {\n              console.log(await annotManager.exportAnnotations({ links: false, widgets: false }));\n              // save the annotations\n              //////////////\n              const doc = docViewer.getDocument();\n            const xfdfString = await annotManager.exportAnnotations();\n            const saveOptions = CoreControls.SaveOptions;\n            const options = {\n              xfdfString,\n              flags: saveOptions.LINEARIZED,\n              downloadType: 'pdf'\n            };\n            const data = await doc.getFileData(options);\n            const arr = new Uint8Array(data);\n            const blob = new Blob([arr], { type: 'application/pdf' });\n\n            }\n          });\n        });\n\n\n\n         //////////////////////////\n\n  \n        docViewer.on('documentLoaded',async  () => {\n          const doc = docViewer.getDocument();\n      const xfdfString = await annotManager.exportAnnotations();\n      const options = { xfdfString };\n      const data = await doc.getFileData(options);\n      const arr = new Uint8Array(data);\n      const blob = new Blob([arr], { type: 'application/pdf' });\n      ///////////////////////\n     \n      //////////////\n          const rectangleAnnot = new Annotations.RectangleAnnotation();\n          rectangleAnnot.PageNumber = 1;\n          // values are in page coordinates with (0, 0) in the top left\n          rectangleAnnot.X = 50;\n          rectangleAnnot.Y = 50;\n          rectangleAnnot.Width = 100;\n          rectangleAnnot.Height = 50;\n          rectangleAnnot.Author = annotManager.getCurrentUser();\n          \n  \n          annotManager.addAnnotation(rectangleAnnot);\n          // need to draw the annotation otherwise it won't show up until the page is refreshed\n          annotManager.redrawAnnotation(rectangleAnnot);\n\n       \n        });\n      });\n    }, []);\n  // }\n\n\n////////////////////////gazab bhai mara https://www.pdftron.com/documentation/web/guides/get-file-data-with-viewer/\n  // useEffect(() => {\n  //     WebViewer(\n  //       {\n  //         path: '/webviewer/lib',\n  //         initialDoc: props.pdfUrl,\n  //       },\n  //       viewer.current,\n  //     )\n  //   .then(instance => {\n  //     const { docViewer, annotManager, CoreControls } = instance;\n  //     ///////////////////////////////////////////\n\n  //     docViewer.on('documentLoaded', async () => {\n  //       const doc = docViewer.getDocument();\n  //       const xfdfString = await annotManager.exportAnnotations();\n  //       const options = { xfdfString };\n  //       const data = await doc.getFileData(options);\n  //       const arr = new Uint8Array(data);\n  //       const blob = new Blob([arr], { type: 'application/pdf' });\n  //       // upload blob to your server\n  //     });\n\n  //     ////////////////////////////////////\n  \n  //     // Add header button that will get file data on click\n  //     instance.setHeaderItems(header => {\n  //       header.push({\n  //           type: 'actionButton',\n  //           img: '...',\n\n  //           onClick: async () => {\n  //             const doc = docViewer.getDocument();\n  //             const xfdfString = await annotManager.exportAnnotations();\n  //             const saveOptions = CoreControls.SaveOptions;\n  //             const options = {\n  //               xfdfString,\n  //               flags: saveOptions.LINEARIZED,\n  //               downloadType: 'pdf'\n  //             };\n  //             const data = await doc.getFileData(options);\n  //             const arr = new Uint8Array(data);\n  //             const blob = new Blob([arr], { type: 'application/pdf' });\n\n  \n  \n  //             // add code for handling Blob here\n  //           }\n  //       });\n  //     });\n  //   });\n  //       });\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">React sample</div>\n\n      <div className=\"webviewer\" ref={viewer}></div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}