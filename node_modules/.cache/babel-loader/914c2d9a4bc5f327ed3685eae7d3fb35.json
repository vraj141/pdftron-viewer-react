{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar url = require('url');\n\nvar caw = require('caw');\n\nvar contentDisposition = require('content-disposition');\n\nvar archiveType = require('archive-type');\n\nvar decompress = require('decompress');\n\nvar filenamify = require('filenamify');\n\nvar getStream = require('get-stream');\n\nvar got = require('got');\n\nvar makeDir = require('make-dir');\n\nvar pify = require('pify');\n\nvar pEvent = require('p-event');\n\nvar fileType = require('file-type');\n\nvar extName = require('ext-name');\n\nvar fsP = pify(fs);\n\nvar filenameFromPath = function filenameFromPath(res) {\n  return path.basename(url.parse(res.requestUrl).pathname);\n};\n\nvar getExtFromMime = function getExtFromMime(res) {\n  var header = res.headers['content-type'];\n\n  if (!header) {\n    return null;\n  }\n\n  var exts = extName.mime(header);\n\n  if (exts.length !== 1) {\n    return null;\n  }\n\n  return exts[0].ext;\n};\n\nvar getFilename = function getFilename(res, data) {\n  var header = res.headers['content-disposition'];\n\n  if (header) {\n    var parsed = contentDisposition.parse(header);\n\n    if (parsed.parameters && parsed.parameters.filename) {\n      return parsed.parameters.filename;\n    }\n  }\n\n  var filename = filenameFromPath(res);\n\n  if (!path.extname(filename)) {\n    var ext = (fileType(data) || {}).ext || getExtFromMime(res);\n\n    if (ext) {\n      filename = \"\".concat(filename, \".\").concat(ext);\n    }\n  }\n\n  return filename;\n};\n\nvar getProtocolFromUri = function getProtocolFromUri(uri) {\n  var _url$parse = url.parse(uri),\n      protocol = _url$parse.protocol;\n\n  if (protocol) {\n    protocol = protocol.slice(0, -1);\n  }\n\n  return protocol;\n};\n\nmodule.exports = function (uri, output, opts) {\n  if (typeof output === 'object') {\n    opts = output;\n    output = null;\n  }\n\n  var protocol = getProtocolFromUri(uri);\n  opts = Object.assign({\n    encoding: null,\n    rejectUnauthorized: process.env.npm_config_strict_ssl !== 'false'\n  }, opts);\n  var agent = caw(opts.proxy, {\n    protocol: protocol\n  });\n  var stream = got.stream(uri, Object.assign({\n    agent: agent\n  }, opts)).on('redirect', function (response, nextOptions) {\n    var redirectProtocol = getProtocolFromUri(nextOptions.href);\n\n    if (redirectProtocol && redirectProtocol !== protocol) {\n      nextOptions.agent = caw(opts.proxy, {\n        protocol: redirectProtocol\n      });\n    }\n  });\n  var promise = pEvent(stream, 'response').then(function (res) {\n    var encoding = opts.encoding === null ? 'buffer' : opts.encoding;\n    return Promise.all([getStream(stream, {\n      encoding: encoding\n    }), res]);\n  }).then(function (result) {\n    var _result = _slicedToArray(result, 2),\n        data = _result[0],\n        res = _result[1];\n\n    if (!output) {\n      return opts.extract && archiveType(data) ? decompress(data, opts) : data;\n    }\n\n    var filename = opts.filename || filenamify(getFilename(res, data));\n    var outputFilepath = path.join(output, filename);\n\n    if (opts.extract && archiveType(data)) {\n      return decompress(data, path.dirname(outputFilepath), opts);\n    }\n\n    return makeDir(path.dirname(outputFilepath)).then(function () {\n      return fsP.writeFile(outputFilepath, data);\n    }).then(function () {\n      return data;\n    });\n  });\n  stream.then = promise.then.bind(promise);\n  stream.catch = promise.catch.bind(promise);\n  return stream;\n};","map":null,"metadata":{},"sourceType":"script"}