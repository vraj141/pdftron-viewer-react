{"ast":null,"code":"'use strict';\n\nvar fileType = require('file-type');\n\nvar getStream = require('get-stream');\n\nvar pify = require('pify');\n\nvar yauzl = require('yauzl');\n\nvar getType = function getType(entry, mode) {\n  var IFMT = 61440;\n  var IFDIR = 16384;\n  var IFLNK = 40960;\n  var madeBy = entry.versionMadeBy >> 8;\n\n  if ((mode & IFMT) === IFLNK) {\n    return 'symlink';\n  }\n\n  if ((mode & IFMT) === IFDIR || madeBy === 0 && entry.externalFileAttributes === 16) {\n    return 'directory';\n  }\n\n  return 'file';\n};\n\nvar extractEntry = function extractEntry(entry, zip) {\n  var file = {\n    mode: entry.externalFileAttributes >> 16 & 0xFFFF,\n    mtime: entry.getLastModDate(),\n    path: entry.fileName\n  };\n  file.type = getType(entry, file.mode);\n\n  if (file.mode === 0 && file.type === 'directory') {\n    file.mode = 493;\n  }\n\n  if (file.mode === 0) {\n    file.mode = 420;\n  }\n\n  return pify(zip.openReadStream.bind(zip))(entry).then(getStream.buffer).then(function (buf) {\n    file.data = buf;\n\n    if (file.type === 'symlink') {\n      file.linkname = buf.toString();\n    }\n\n    return file;\n  }).catch(function (err) {\n    zip.close();\n    throw err;\n  });\n};\n\nvar extractFile = function extractFile(zip) {\n  return new Promise(function (resolve, reject) {\n    var files = [];\n    zip.readEntry();\n    zip.on('entry', function (entry) {\n      extractEntry(entry, zip).catch(reject).then(function (file) {\n        files.push(file);\n        zip.readEntry();\n      });\n    });\n    zip.on('error', reject);\n    zip.on('end', function () {\n      return resolve(files);\n    });\n  });\n};\n\nmodule.exports = function () {\n  return function (buf) {\n    if (!Buffer.isBuffer(buf)) {\n      return Promise.reject(new TypeError(\"Expected a Buffer, got \".concat(typeof buf)));\n    }\n\n    if (!fileType(buf) || fileType(buf).ext !== 'zip') {\n      return Promise.resolve([]);\n    }\n\n    return pify(yauzl.fromBuffer)(buf, {\n      lazyEntries: true\n    }).then(extractFile);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}