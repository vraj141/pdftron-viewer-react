{"ast":null,"code":"'use strict';\n\nvar fileType = require('file-type');\n\nvar isStream = require('is-stream');\n\nvar tarStream = require('tar-stream');\n\nmodule.exports = function () {\n  return function (input) {\n    if (!Buffer.isBuffer(input) && !isStream(input)) {\n      return Promise.reject(new TypeError(\"Expected a Buffer or Stream, got \".concat(typeof input)));\n    }\n\n    if (Buffer.isBuffer(input) && (!fileType(input) || fileType(input).ext !== 'tar')) {\n      return Promise.resolve([]);\n    }\n\n    var extract = tarStream.extract();\n    var files = [];\n    extract.on('entry', function (header, stream, cb) {\n      var chunk = [];\n      stream.on('data', function (data) {\n        return chunk.push(data);\n      });\n      stream.on('end', function () {\n        var file = {\n          data: Buffer.concat(chunk),\n          mode: header.mode,\n          mtime: header.mtime,\n          path: header.name,\n          type: header.type\n        };\n\n        if (header.type === 'symlink' || header.type === 'link') {\n          file.linkname = header.linkname;\n        }\n\n        files.push(file);\n        cb();\n      });\n    });\n    var promise = new Promise(function (resolve, reject) {\n      if (!Buffer.isBuffer(input)) {\n        input.on('error', reject);\n      }\n\n      extract.on('finish', function () {\n        return resolve(files);\n      });\n      extract.on('error', reject);\n    });\n    extract.then = promise.then.bind(promise);\n    extract.catch = promise.catch.bind(promise);\n\n    if (Buffer.isBuffer(input)) {\n      extract.end(input);\n    } else {\n      input.pipe(extract);\n    }\n\n    return extract;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}