{"ast":null,"code":"//TODO: handle reviver/dehydrate function like normal\n//and handle indentation, like normal.\n//if anyone needs this... please send pull request.\nexports.stringify = function stringify(o) {\n  if ('undefined' == typeof o) return o;\n  if (o && Buffer.isBuffer(o)) return JSON.stringify(':base64:' + o.toString('base64'));\n  if (o && o.toJSON) o = o.toJSON();\n\n  if (o && 'object' === typeof o) {\n    var s = '';\n    var array = Array.isArray(o);\n    s = array ? '[' : '{';\n    var first = true;\n\n    for (var k in o) {\n      var ignore = 'function' == typeof o[k] || !array && 'undefined' === typeof o[k];\n\n      if (Object.hasOwnProperty.call(o, k) && !ignore) {\n        if (!first) s += ',';\n        first = false;\n\n        if (array) {\n          if (o[k] == undefined) s += 'null';else s += stringify(o[k]);\n        } else if (o[k] !== void 0) {\n          s += stringify(k) + ':' + stringify(o[k]);\n        }\n      }\n    }\n\n    s += array ? ']' : '}';\n    return s;\n  } else if ('string' === typeof o) {\n    return JSON.stringify(/^:/.test(o) ? ':' + o : o);\n  } else if ('undefined' === typeof o) {\n    return 'null';\n  } else return JSON.stringify(o);\n};\n\nexports.parse = function (s) {\n  return JSON.parse(s, function (key, value) {\n    if ('string' === typeof value) {\n      if (/^:base64:/.test(value)) return new Buffer(value.substring(8), 'base64');else return /^:/.test(value) ? value.substring(1) : value;\n    }\n\n    return value;\n  });\n};","map":null,"metadata":{},"sourceType":"script"}