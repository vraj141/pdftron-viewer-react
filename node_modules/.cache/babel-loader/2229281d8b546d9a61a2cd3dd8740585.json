{"ast":null,"code":"var BITMASK = [0, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF]; // returns a function that reads bits.\n// takes a buffer iterator as input\n\nmodule.exports = function bitIterator(nextBuffer) {\n  var bit = 0,\n      byte = 0;\n  var bytes = nextBuffer();\n\n  var f = function f(n) {\n    if (n === null && bit != 0) {\n      // align to byte boundary\n      bit = 0;\n      byte++;\n      return;\n    }\n\n    var result = 0;\n\n    while (n > 0) {\n      if (byte >= bytes.length) {\n        byte = 0;\n        bytes = nextBuffer();\n      }\n\n      var left = 8 - bit;\n      if (bit === 0 && n > 0) f.bytesRead++;\n\n      if (n >= left) {\n        result <<= left;\n        result |= BITMASK[left] & bytes[byte++];\n        bit = 0;\n        n -= left;\n      } else {\n        result <<= n;\n        result |= (bytes[byte] & BITMASK[n] << 8 - n - bit) >> 8 - n - bit;\n        bit += n;\n        n = 0;\n      }\n    }\n\n    return result;\n  };\n\n  f.bytesRead = 0;\n  return f;\n};","map":null,"metadata":{},"sourceType":"script"}