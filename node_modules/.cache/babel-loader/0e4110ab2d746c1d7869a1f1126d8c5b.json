{"ast":null,"code":"'use strict';\n\nmodule.exports = function (req, time) {\n  if (req.timeoutTimer) {\n    return req;\n  }\n\n  var delays = isNaN(time) ? time : {\n    socket: time,\n    connect: time\n  };\n  var host = req._headers ? ' to ' + req._headers.host : '';\n\n  if (delays.connect !== undefined) {\n    req.timeoutTimer = setTimeout(function timeoutHandler() {\n      req.abort();\n      var e = new Error('Connection timed out on request' + host);\n      e.code = 'ETIMEDOUT';\n      req.emit('error', e);\n    }, delays.connect);\n  } // Clear the connection timeout timer once a socket is assigned to the\n  // request and is connected.\n\n\n  req.on('socket', function assign(socket) {\n    // Socket may come from Agent pool and may be already connected.\n    if (!(socket.connecting || socket._connecting)) {\n      connect();\n      return;\n    }\n\n    socket.once('connect', connect);\n  });\n\n  function clear() {\n    if (req.timeoutTimer) {\n      clearTimeout(req.timeoutTimer);\n      req.timeoutTimer = null;\n    }\n  }\n\n  function connect() {\n    clear();\n\n    if (delays.socket !== undefined) {\n      // Abort the request if there is no activity on the socket for more\n      // than `delays.socket` milliseconds.\n      req.setTimeout(delays.socket, function socketTimeoutHandler() {\n        req.abort();\n        var e = new Error('Socket timed out on request' + host);\n        e.code = 'ESOCKETTIMEDOUT';\n        req.emit('error', e);\n      });\n    }\n  }\n\n  return req.on('error', clear);\n};","map":null,"metadata":{},"sourceType":"script"}