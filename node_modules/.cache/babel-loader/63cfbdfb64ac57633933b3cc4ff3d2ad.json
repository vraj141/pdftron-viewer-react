{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\src\\\\App.js\";\n\nimport React, { useRef, useEffect } from 'react';\nimport WebViewer from '@pdftron/webviewer';\nimport './App.css';\nimport { storage } from './firebase';\n\nvar App = function App(props) {\n  var viewer = useRef(null); ///////////////////////////////////////////////////////////////////////////\n\n  useEffect(function () {\n    WebViewer({\n      path: '/webviewer/lib',\n      initialDoc: props.pdfUrl,\n      fullAPI: true\n    }, viewer.current).then(function (instance) {\n      instance.setTheme('dark');\n      var docViewer = instance.docViewer,\n          Annotations = instance.Annotations,\n          CoreControls = instance.CoreControls;\n      var annotManager = docViewer.getAnnotationManager(); ///////////////////////////////////////////////////\n      ///save button header\n\n      instance.setHeaderItems(function (header) {\n        header.push({\n          type: 'actionButton',\n          img: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"/></svg>',\n          onClick: function () {\n            var _onClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              var options;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.t0 = console;\n                      _context.next = 3;\n                      return annotManager.exportAnnotations({\n                        links: false,\n                        widgets: false\n                      });\n\n                    case 3:\n                      _context.t1 = _context.sent;\n\n                      _context.t0.log.call(_context.t0, _context.t1);\n\n                      // save the annotations\n                      //////////////\n                      //   const doc = docViewer.getDocument();\n                      // // const xfdfString = await annotManager.exportAnnotations();\n                      // // // const data = await doc.getFileData({ xfdfString});\n                      // // // // const arr = new Uint8Array(data);\n                      // // // // const blob = new Blob([arr], { type: 'application/pdf' });\n                      // // // // let fileRef = storage.ref().child(props.pdfUrl);\n                      // // // // fileRef.put(blob);\n                      ////////////\n                      options = {\n                        xfdfString: xfdfString,\n                        flatten: true\n                      };\n                      annotManager.exportAnnotations({\n                        links: false,\n                        widgets: false\n                      }).then(function (xfdfString) {\n                        fetch(props.pdfUrl, {\n                          method: 'POST',\n                          body: xfdfString // written into an XFDF file in server\n\n                        }); // Full samples are available at the end of this section.\n                      });\n\n                    case 7:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            function onClick() {\n              return _onClick.apply(this, arguments);\n            }\n\n            return onClick;\n          }()\n        });\n      }); //////////////////////////\n\n      docViewer.on('documentLoaded', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var doc, rectangleAnnot;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                doc = docViewer.getDocument();\n                rectangleAnnot = new Annotations.RectangleAnnotation();\n                rectangleAnnot.PageNumber = 1; // values are in page coordinates with (0, 0) in the top left\n\n                rectangleAnnot.X = 50;\n                rectangleAnnot.Y = 50;\n                rectangleAnnot.Width = 100;\n                rectangleAnnot.Height = 50;\n                rectangleAnnot.Author = annotManager.getCurrentUser();\n                annotManager.addAnnotation(rectangleAnnot); // need to draw the annotation otherwise it won't show up until the page is refreshed\n\n                annotManager.redrawAnnotation(rectangleAnnot);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })));\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, \"React sample\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"webviewer\",\n    ref: viewer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/vrajs/Desktop/firebase-file-upload-pdftron-reactjs/src/App.js"],"names":["React","useRef","useEffect","WebViewer","storage","App","props","viewer","path","initialDoc","pdfUrl","fullAPI","current","then","instance","setTheme","docViewer","Annotations","CoreControls","annotManager","getAnnotationManager","setHeaderItems","header","push","type","img","onClick","console","exportAnnotations","links","widgets","log","options","xfdfString","flatten","fetch","method","body","on","doc","getDocument","rectangleAnnot","RectangleAnnotation","PageNumber","X","Y","Width","Height","Author","getCurrentUser","addAnnotation","redrawAnnotation"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect} from 'react';\nimport WebViewer from '@pdftron/webviewer';\nimport './App.css';\nimport { storage } from './firebase';\n \n\n\n\nconst App = (props) => {\n  const viewer = useRef(null);\n \n   \n  ///////////////////////////////////////////////////////////////////////////\n    useEffect(() => {\n      WebViewer(\n        {\n          path: '/webviewer/lib',\n          initialDoc: props.pdfUrl,\n          fullAPI: true,\n        },  \n        viewer.current,\n      ).then((instance) => {\n        instance.setTheme('dark');\n        const { docViewer, Annotations ,   CoreControls} = instance;\n        const annotManager = docViewer.getAnnotationManager();\n\n       \n        \n    \n\n         ///////////////////////////////////////////////////\n         ///save button header\n         instance.setHeaderItems(header => {\n          header.push({\n            type: 'actionButton',\n            img: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"/></svg>',\n            onClick: async() => {\n              console.log(await annotManager.exportAnnotations({ links: false, widgets: false }));\n              // save the annotations\n              //////////////\n            //   const doc = docViewer.getDocument();\n            // // const xfdfString = await annotManager.exportAnnotations();\n            \n            // // // const data = await doc.getFileData({ xfdfString});\n            // // // // const arr = new Uint8Array(data);\n            // // // // const blob = new Blob([arr], { type: 'application/pdf' });\n            // // // // let fileRef = storage.ref().child(props.pdfUrl);\n            // // // // fileRef.put(blob);\n            \n\n            ////////////\n            const options = { xfdfString, flatten: true };\n            \n\n\n            annotManager.exportAnnotations({ links: false, widgets: false }).then(xfdfString => {\n              fetch(props.pdfUrl, {\n                method: 'POST',\n                body: xfdfString // written into an XFDF file in server\n                 \n              });\n              // Full samples are available at the end of this section.\n            })\n\n            }\n          });\n        });\n\n\n\n         //////////////////////////\n\n  \n        docViewer.on('documentLoaded',async  () => {\n          const doc = docViewer.getDocument();\n     \n  \n          const rectangleAnnot = new Annotations.RectangleAnnotation();\n          rectangleAnnot.PageNumber = 1;\n          // values are in page coordinates with (0, 0) in the top left\n          rectangleAnnot.X = 50;\n          rectangleAnnot.Y = 50;\n          rectangleAnnot.Width = 100;\n          rectangleAnnot.Height = 50;\n          rectangleAnnot.Author = annotManager.getCurrentUser();\n          \n  \n          annotManager.addAnnotation(rectangleAnnot);\n          // need to draw the annotation otherwise it won't show up until the page is refreshed\n          annotManager.redrawAnnotation(rectangleAnnot);\n\n       \n        });\n      });\n    }, []);\n   \n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">React sample</div>\n\n      <div className=\"webviewer\" ref={viewer}></div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}