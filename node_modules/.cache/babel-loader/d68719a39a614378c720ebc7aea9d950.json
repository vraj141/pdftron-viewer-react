{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar pTimeout = require('p-timeout');\n\nvar symbolAsyncIterator = Symbol.asyncIterator || '@@asyncIterator';\n\nvar normalizeEmitter = function normalizeEmitter(emitter) {\n  var addListener = emitter.on || emitter.addListener || emitter.addEventListener;\n  var removeListener = emitter.off || emitter.removeListener || emitter.removeEventListener;\n\n  if (!addListener || !removeListener) {\n    throw new TypeError('Emitter is not compatible');\n  }\n\n  return {\n    addListener: addListener.bind(emitter),\n    removeListener: removeListener.bind(emitter)\n  };\n};\n\nvar normalizeEvents = function normalizeEvents(event) {\n  return Array.isArray(event) ? event : [event];\n};\n\nvar multiple = function multiple(emitter, event, options) {\n  var cancel;\n  var ret = new Promise(function (resolve, reject) {\n    options = Object.assign({\n      rejectionEvents: ['error'],\n      multiArgs: false,\n      resolveImmediately: false\n    }, options);\n\n    if (!(options.count >= 0 && (options.count === Infinity || Number.isInteger(options.count)))) {\n      throw new TypeError('The `count` option should be at least 0 or more');\n    } // Allow multiple events\n\n\n    var events = normalizeEvents(event);\n    var items = [];\n\n    var _normalizeEmitter = normalizeEmitter(emitter),\n        addListener = _normalizeEmitter.addListener,\n        removeListener = _normalizeEmitter.removeListener;\n\n    var onItem = function onItem() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var value = options.multiArgs ? args : args[0];\n\n      if (options.filter && !options.filter(value)) {\n        return;\n      }\n\n      items.push(value);\n\n      if (options.count === items.length) {\n        cancel();\n        resolve(items);\n      }\n    };\n\n    var rejectHandler = function rejectHandler(error) {\n      cancel();\n      reject(error);\n    };\n\n    cancel = function cancel() {\n      var _iterator = _createForOfIteratorHelper(events),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _event = _step.value;\n          removeListener(_event, onItem);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(options.rejectionEvents),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var rejectionEvent = _step2.value;\n          removeListener(rejectionEvent, rejectHandler);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    };\n\n    var _iterator3 = _createForOfIteratorHelper(events),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _event2 = _step3.value;\n        addListener(_event2, onItem);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    var _iterator4 = _createForOfIteratorHelper(options.rejectionEvents),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var rejectionEvent = _step4.value;\n        addListener(rejectionEvent, rejectHandler);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    if (options.resolveImmediately) {\n      resolve(items);\n    }\n  });\n  ret.cancel = cancel;\n\n  if (typeof options.timeout === 'number') {\n    var timeout = pTimeout(ret, options.timeout);\n    timeout.cancel = cancel;\n    return timeout;\n  }\n\n  return ret;\n};\n\nmodule.exports = function (emitter, event, options) {\n  if (typeof options === 'function') {\n    options = {\n      filter: options\n    };\n  }\n\n  options = Object.assign({}, options, {\n    count: 1,\n    resolveImmediately: false\n  });\n  var arrayPromise = multiple(emitter, event, options);\n  var promise = arrayPromise.then(function (array) {\n    return array[0];\n  });\n  promise.cancel = arrayPromise.cancel;\n  return promise;\n};\n\nmodule.exports.multiple = multiple;\n\nmodule.exports.iterator = function (emitter, event, options) {\n  var _ref2;\n\n  if (typeof options === 'function') {\n    options = {\n      filter: options\n    };\n  } // Allow multiple events\n\n\n  var events = normalizeEvents(event);\n  options = Object.assign({\n    rejectionEvents: ['error'],\n    resolutionEvents: [],\n    limit: Infinity,\n    multiArgs: false\n  }, options);\n  var _options = options,\n      limit = _options.limit;\n  var isValidLimit = limit >= 0 && (limit === Infinity || Number.isInteger(limit));\n\n  if (!isValidLimit) {\n    throw new TypeError('The `limit` option should be a non-negative integer or Infinity');\n  }\n\n  if (limit === 0) {\n    var _ref;\n\n    // Return an empty async iterator to avoid any further cost\n    return _ref = {}, _defineProperty(_ref, Symbol.asyncIterator, function () {\n      return this;\n    }), _defineProperty(_ref, \"next\", function next() {\n      return Promise.resolve({\n        done: true,\n        value: undefined\n      });\n    }), _ref;\n  }\n\n  var isLimitReached = false;\n\n  var _normalizeEmitter2 = normalizeEmitter(emitter),\n      addListener = _normalizeEmitter2.addListener,\n      removeListener = _normalizeEmitter2.removeListener;\n\n  var done = false;\n  var error;\n  var hasPendingError = false;\n  var nextQueue = [];\n  var valueQueue = [];\n  var eventCount = 0;\n\n  var valueHandler = function valueHandler() {\n    eventCount++;\n    isLimitReached = eventCount === limit;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    var value = options.multiArgs ? args : args[0];\n\n    if (nextQueue.length > 0) {\n      var _nextQueue$shift = nextQueue.shift(),\n          resolve = _nextQueue$shift.resolve;\n\n      resolve({\n        done: false,\n        value: value\n      });\n\n      if (isLimitReached) {\n        cancel();\n      }\n\n      return;\n    }\n\n    valueQueue.push(value);\n\n    if (isLimitReached) {\n      cancel();\n    }\n  };\n\n  var cancel = function cancel() {\n    done = true;\n\n    var _iterator5 = _createForOfIteratorHelper(events),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var _event3 = _step5.value;\n        removeListener(_event3, valueHandler);\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    var _iterator6 = _createForOfIteratorHelper(options.rejectionEvents),\n        _step6;\n\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var rejectionEvent = _step6.value;\n        removeListener(rejectionEvent, rejectHandler);\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n\n    var _iterator7 = _createForOfIteratorHelper(options.resolutionEvents),\n        _step7;\n\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var resolutionEvent = _step7.value;\n        removeListener(resolutionEvent, resolveHandler);\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n\n    while (nextQueue.length > 0) {\n      var _nextQueue$shift2 = nextQueue.shift(),\n          resolve = _nextQueue$shift2.resolve;\n\n      resolve({\n        done: true,\n        value: undefined\n      });\n    }\n  };\n\n  var rejectHandler = function rejectHandler() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    error = options.multiArgs ? args : args[0];\n\n    if (nextQueue.length > 0) {\n      var _nextQueue$shift3 = nextQueue.shift(),\n          reject = _nextQueue$shift3.reject;\n\n      reject(error);\n    } else {\n      hasPendingError = true;\n    }\n\n    cancel();\n  };\n\n  var resolveHandler = function resolveHandler() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    var value = options.multiArgs ? args : args[0];\n\n    if (options.filter && !options.filter(value)) {\n      return;\n    }\n\n    if (nextQueue.length > 0) {\n      var _nextQueue$shift4 = nextQueue.shift(),\n          resolve = _nextQueue$shift4.resolve;\n\n      resolve({\n        done: true,\n        value: value\n      });\n    } else {\n      valueQueue.push(value);\n    }\n\n    cancel();\n  };\n\n  var _iterator8 = _createForOfIteratorHelper(events),\n      _step8;\n\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var _event4 = _step8.value;\n      addListener(_event4, valueHandler);\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n\n  var _iterator9 = _createForOfIteratorHelper(options.rejectionEvents),\n      _step9;\n\n  try {\n    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n      var rejectionEvent = _step9.value;\n      addListener(rejectionEvent, rejectHandler);\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n\n  var _iterator10 = _createForOfIteratorHelper(options.resolutionEvents),\n      _step10;\n\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var resolutionEvent = _step10.value;\n      addListener(resolutionEvent, resolveHandler);\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n\n  return _ref2 = {}, _defineProperty(_ref2, symbolAsyncIterator, function () {\n    return this;\n  }), _defineProperty(_ref2, \"next\", function next() {\n    if (valueQueue.length > 0) {\n      var value = valueQueue.shift();\n      return Promise.resolve({\n        done: done && valueQueue.length === 0 && !isLimitReached,\n        value: value\n      });\n    }\n\n    if (hasPendingError) {\n      hasPendingError = false;\n      return Promise.reject(error);\n    }\n\n    if (done) {\n      return Promise.resolve({\n        done: true,\n        value: undefined\n      });\n    }\n\n    return new Promise(function (resolve, reject) {\n      return nextQueue.push({\n        resolve: resolve,\n        reject: reject\n      });\n    });\n  }), _defineProperty(_ref2, \"return\", function _return(value) {\n    cancel();\n    return Promise.resolve({\n      done: done,\n      value: value\n    });\n  }), _ref2;\n};","map":null,"metadata":{},"sourceType":"script"}