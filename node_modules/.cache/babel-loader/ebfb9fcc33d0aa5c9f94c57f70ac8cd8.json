{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\src\\\\App.js\";\n\nimport React, { useRef, useEffect } from 'react';\nimport WebViewer from '@pdftron/webviewer';\nimport './App.css';\n\nvar App = function App(props) {\n  var viewer = useRef(null); // const [pdfUrl, setPdfUrl] = useState(pdfUrl);\n  // useEffect(()=>{\n  //   setPdf(props.pdfUrl);\n  // },[props.pdfUrl])\n  // // if using a class, equivalent of componentDidMount \n  // if(pdf){\n  /////////////////////////////////////////////////////////////////////////////\n  // useEffect(() => {\n  //   WebViewer(\n  //     {\n  //       path: '/webviewer/lib',\n  //       initialDoc: props.pdfUrl,\n  //     },\n  //     viewer.current,\n  //   ).then((instance) => {\n  //     instance.setTheme('dark');\n  //     const { docViewer, Annotations } = instance;\n  //     const annotManager = docViewer.getAnnotationManager();\n  //      ///////////////////////////////////////////////////\n  //     docViewer.on('documentLoaded', () => {\n  //       const rectangleAnnot = new Annotations.RectangleAnnotation();\n  //       rectangleAnnot.PageNumber = 1;\n  //       // values are in page coordinates with (0, 0) in the top left\n  //       rectangleAnnot.X = 50;\n  //       rectangleAnnot.Y = 50;\n  //       rectangleAnnot.Width = 100;\n  //       rectangleAnnot.Height = 50;\n  //       rectangleAnnot.Author = annotManager.getCurrentUser();\n  //       annotManager.addAnnotation(rectangleAnnot);\n  //       // need to draw the annotation otherwise it won't show up until the page is refreshed\n  //       annotManager.redrawAnnotation(rectangleAnnot);\n  //     });\n  //   });\n  // }, []);\n  // }\n\n  useEffect(function () {\n    WebViewer({\n      path: '/webviewer/lib',\n      initialDoc: props.pdfUrl\n    }, viewer.current).then(function (instance) {\n      var docViewer = instance.docViewer,\n          annotManager = instance.annotManager; // Add header button that will get file data on click\n\n      instance.setHeaderItems(function (header) {\n        header.push({\n          type: 'actionButton',\n          img: '...',\n          onClick: function () {\n            var _onClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              var doc, xfdfString, data, arr, blob;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      doc = docViewer.getDocument();\n                      _context.next = 3;\n                      return annotManager.exportAnnotations();\n\n                    case 3:\n                      xfdfString = _context.sent;\n                      _context.next = 6;\n                      return doc.getFileData({\n                        // saves the document with annotations in it\n                        xfdfString: xfdfString\n                      });\n\n                    case 6:\n                      data = _context.sent;\n                      arr = new Uint8Array(data);\n                      blob = new Blob([arr], {\n                        type: 'application/pdf'\n                      }); // add code for handling Blob here\n\n                    case 9:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            function onClick() {\n              return _onClick.apply(this, arguments);\n            }\n\n            return onClick;\n          }()\n        });\n      });\n    });\n  }); // }, []);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, \"React sample\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"webviewer\",\n    ref: viewer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/vrajs/Desktop/firebase-file-upload-pdftron-reactjs/src/App.js"],"names":["React","useRef","useEffect","WebViewer","App","props","viewer","path","initialDoc","pdfUrl","current","then","instance","docViewer","annotManager","setHeaderItems","header","push","type","img","onClick","doc","getDocument","exportAnnotations","xfdfString","getFileData","data","arr","Uint8Array","blob","Blob"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAO,WAAP;;AAKA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,KAAD,EAAW;AACrB,MAAMC,MAAM,GAAGL,MAAM,CAAC,IAAD,CAArB,CADqB,CAErB;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEF;;AACAC,EAAAA,SAAS,CAAC,YAAM;AACZC,IAAAA,SAAS,CACP;AACEI,MAAAA,IAAI,EAAE,gBADR;AAEEC,MAAAA,UAAU,EAAEH,KAAK,CAACI;AAFpB,KADO,EAKPH,MAAM,CAACI,OALA,CAAT,CAODC,IAPC,CAOI,UAAAC,QAAQ,EAAI;AAAA,UACRC,SADQ,GACoBD,QADpB,CACRC,SADQ;AAAA,UACGC,YADH,GACoBF,QADpB,CACGE,YADH,EAGhB;;AACAF,MAAAA,QAAQ,CAACG,cAAT,CAAwB,UAAAC,MAAM,EAAI;AAChCA,QAAAA,MAAM,CAACC,IAAP,CAAY;AACRC,UAAAA,IAAI,EAAE,cADE;AAERC,UAAAA,GAAG,EAAE,KAFG;AAGRC,UAAAA,OAAO;AAAA,oFAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,sBAAAA,GADC,GACKR,SAAS,CAACS,WAAV,EADL;AAAA;AAAA,6BAEkBR,YAAY,CAACS,iBAAb,EAFlB;;AAAA;AAEDC,sBAAAA,UAFC;AAAA;AAAA,6BAGYH,GAAG,CAACI,WAAJ,CAAgB;AACjC;AACAD,wBAAAA,UAAU,EAAVA;AAFiC,uBAAhB,CAHZ;;AAAA;AAGDE,sBAAAA,IAHC;AAODC,sBAAAA,GAPC,GAOK,IAAIC,UAAJ,CAAeF,IAAf,CAPL;AAQDG,sBAAAA,IARC,GAQM,IAAIC,IAAJ,CAAS,CAACH,GAAD,CAAT,EAAgB;AAAET,wBAAAA,IAAI,EAAE;AAAR,uBAAhB,CARN,EAUP;;AAVO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAHC,SAAZ;AAgBD,OAjBD;AAkBD,KA7BC;AA8BG,GA/BE,CAAT,CA9CqB,CA8EnB;;AAEF,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAGE;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,GAAG,EAAEZ,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CAvFD;;AAyFA,eAAeF,GAAf","sourcesContent":["import React, { useRef, useEffect} from 'react';\nimport WebViewer from '@pdftron/webviewer';\nimport './App.css';\n \n\n\n\nconst App = (props) => {\n  const viewer = useRef(null);\n  // const [pdfUrl, setPdfUrl] = useState(pdfUrl);\n\n  // useEffect(()=>{\n  //   setPdf(props.pdfUrl);\n  // },[props.pdfUrl])\n\n  // // if using a class, equivalent of componentDidMount \n  // if(pdf){\n\n\n   \n  /////////////////////////////////////////////////////////////////////////////\n    // useEffect(() => {\n    //   WebViewer(\n    //     {\n    //       path: '/webviewer/lib',\n    //       initialDoc: props.pdfUrl,\n    //     },\n    //     viewer.current,\n    //   ).then((instance) => {\n    //     instance.setTheme('dark');\n    //     const { docViewer, Annotations } = instance;\n    //     const annotManager = docViewer.getAnnotationManager();\n    //      ///////////////////////////////////////////////////\n  \n    //     docViewer.on('documentLoaded', () => {\n    //       const rectangleAnnot = new Annotations.RectangleAnnotation();\n    //       rectangleAnnot.PageNumber = 1;\n    //       // values are in page coordinates with (0, 0) in the top left\n    //       rectangleAnnot.X = 50;\n    //       rectangleAnnot.Y = 50;\n    //       rectangleAnnot.Width = 100;\n    //       rectangleAnnot.Height = 50;\n    //       rectangleAnnot.Author = annotManager.getCurrentUser();\n          \n  \n    //       annotManager.addAnnotation(rectangleAnnot);\n    //       // need to draw the annotation otherwise it won't show up until the page is refreshed\n    //       annotManager.redrawAnnotation(rectangleAnnot);\n    //     });\n    //   });\n    // }, []);\n\n  // }\n  useEffect(() => {\n      WebViewer(\n        {\n          path: '/webviewer/lib',\n          initialDoc: props.pdfUrl,\n        },\n        viewer.current,\n      )\n    .then(instance => {\n      const { docViewer, annotManager } = instance;\n  \n      // Add header button that will get file data on click\n      instance.setHeaderItems(header => {\n        header.push({\n            type: 'actionButton',\n            img: '...',\n            onClick: async () => {\n              const doc = docViewer.getDocument();\n              const xfdfString = await annotManager.exportAnnotations();\n              const data = await doc.getFileData({\n                // saves the document with annotations in it\n                xfdfString\n              });\n              const arr = new Uint8Array(data);\n              const blob = new Blob([arr], { type: 'application/pdf' });\n  \n              // add code for handling Blob here\n            }\n        });\n      });\n    });\n        });\n    // }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">React sample</div>\n\n      <div className=\"webviewer\" ref={viewer}></div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}