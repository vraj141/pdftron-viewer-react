{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar fs = require('graceful-fs');\n\nvar decompressTar = require('decompress-tar');\n\nvar decompressTarbz2 = require('decompress-tarbz2');\n\nvar decompressTargz = require('decompress-targz');\n\nvar decompressUnzip = require('decompress-unzip');\n\nvar makeDir = require('make-dir');\n\nvar pify = require('pify');\n\nvar stripDirs = require('strip-dirs');\n\nvar fsP = pify(fs);\n\nvar runPlugins = function runPlugins(input, opts) {\n  if (opts.plugins.length === 0) {\n    return Promise.resolve([]);\n  }\n\n  return Promise.all(opts.plugins.map(function (x) {\n    return x(input, opts);\n  })).then(function (files) {\n    return files.reduce(function (a, b) {\n      return a.concat(b);\n    });\n  });\n};\n\nvar safeMakeDir = function safeMakeDir(dir, realOutputPath) {\n  return fsP.realpath(dir).catch(function (_) {\n    var parent = path.dirname(dir);\n    return safeMakeDir(parent, realOutputPath);\n  }).then(function (realParentPath) {\n    if (realParentPath.indexOf(realOutputPath) !== 0) {\n      throw new Error('Refusing to create a directory outside the output path.');\n    }\n\n    return makeDir(dir).then(fsP.realpath);\n  });\n};\n\nvar preventWritingThroughSymlink = function preventWritingThroughSymlink(destination, realOutputPath) {\n  return fsP.readlink(destination).catch(function (_) {\n    // Either no file exists, or it's not a symlink. In either case, this is\n    // not an escape we need to worry about in this phase.\n    return null;\n  }).then(function (symlinkPointsTo) {\n    if (symlinkPointsTo) {\n      throw new Error('Refusing to write into a symlink');\n    } // No symlink exists at `destination`, so we can continue\n\n\n    return realOutputPath;\n  });\n};\n\nvar extractFile = function extractFile(input, output, opts) {\n  return runPlugins(input, opts).then(function (files) {\n    if (opts.strip > 0) {\n      files = files.map(function (x) {\n        x.path = stripDirs(x.path, opts.strip);\n        return x;\n      }).filter(function (x) {\n        return x.path !== '.';\n      });\n    }\n\n    if (typeof opts.filter === 'function') {\n      files = files.filter(opts.filter);\n    }\n\n    if (typeof opts.map === 'function') {\n      files = files.map(opts.map);\n    }\n\n    if (!output) {\n      return files;\n    }\n\n    return Promise.all(files.map(function (x) {\n      var dest = path.join(output, x.path);\n      var mode = x.mode & ~process.umask();\n      var now = new Date();\n\n      if (x.type === 'directory') {\n        return makeDir(output).then(function (outputPath) {\n          return fsP.realpath(outputPath);\n        }).then(function (realOutputPath) {\n          return safeMakeDir(dest, realOutputPath);\n        }).then(function () {\n          return fsP.utimes(dest, now, x.mtime);\n        }).then(function () {\n          return x;\n        });\n      }\n\n      return makeDir(output).then(function (outputPath) {\n        return fsP.realpath(outputPath);\n      }).then(function (realOutputPath) {\n        // Attempt to ensure parent directory exists (failing if it's outside the output dir)\n        return safeMakeDir(path.dirname(dest), realOutputPath).then(function () {\n          return realOutputPath;\n        });\n      }).then(function (realOutputPath) {\n        if (x.type === 'file') {\n          return preventWritingThroughSymlink(dest, realOutputPath);\n        }\n\n        return realOutputPath;\n      }).then(function (realOutputPath) {\n        return fsP.realpath(path.dirname(dest)).then(function (realDestinationDir) {\n          if (realDestinationDir.indexOf(realOutputPath) !== 0) {\n            throw new Error('Refusing to write outside output directory: ' + realDestinationDir);\n          }\n        });\n      }).then(function () {\n        if (x.type === 'link') {\n          return fsP.link(x.linkname, dest);\n        }\n\n        if (x.type === 'symlink' && process.platform === 'win32') {\n          return fsP.link(x.linkname, dest);\n        }\n\n        if (x.type === 'symlink') {\n          return fsP.symlink(x.linkname, dest);\n        }\n\n        return fsP.writeFile(dest, x.data, {\n          mode: mode\n        });\n      }).then(function () {\n        return x.type === 'file' && fsP.utimes(dest, now, x.mtime);\n      }).then(function () {\n        return x;\n      });\n    }));\n  });\n};\n\nmodule.exports = function (input, output, opts) {\n  if (typeof input !== 'string' && !Buffer.isBuffer(input)) {\n    return Promise.reject(new TypeError('Input file required'));\n  }\n\n  if (typeof output === 'object') {\n    opts = output;\n    output = null;\n  }\n\n  opts = Object.assign({\n    plugins: [decompressTar(), decompressTarbz2(), decompressTargz(), decompressUnzip()]\n  }, opts);\n  var read = typeof input === 'string' ? fsP.readFile(input) : Promise.resolve(input);\n  return read.then(function (buf) {\n    return extractFile(buf, output, opts);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}