{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\n\nvar pFinally = require('p-finally');\n\nvar TimeoutError = /*#__PURE__*/function (_Error) {\n  _inherits(TimeoutError, _Error);\n\n  function TimeoutError(message) {\n    var _this;\n\n    _classCallCheck(this, TimeoutError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimeoutError).call(this, message));\n    _this.name = 'TimeoutError';\n    return _this;\n  }\n\n  return TimeoutError;\n}(_wrapNativeSuper(Error));\n\nmodule.exports = function (promise, ms, fallback) {\n  return new Promise(function (resolve, reject) {\n    if (typeof ms !== 'number' || ms < 0) {\n      throw new TypeError('Expected `ms` to be a positive number');\n    }\n\n    var timer = setTimeout(function () {\n      if (typeof fallback === 'function') {\n        try {\n          resolve(fallback());\n        } catch (err) {\n          reject(err);\n        }\n\n        return;\n      }\n\n      var message = typeof fallback === 'string' ? fallback : \"Promise timed out after \".concat(ms, \" milliseconds\");\n      var err = fallback instanceof Error ? fallback : new TimeoutError(message);\n\n      if (typeof promise.cancel === 'function') {\n        promise.cancel();\n      }\n\n      reject(err);\n    }, ms);\n    pFinally(promise.then(resolve, reject), function () {\n      clearTimeout(timer);\n    });\n  });\n};\n\nmodule.exports.TimeoutError = TimeoutError;","map":null,"metadata":{},"sourceType":"script"}