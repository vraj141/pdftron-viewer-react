{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\src\\\\App.js\";\n\nimport React, { useRef, useEffect } from 'react';\nimport WebViewer from '@pdftron/webviewer';\nimport './App.css';\nimport { storage } from './firebase';\n\nvar App = function App(props) {\n  var viewer = useRef(null); ///////////////////////////////////////////////////////////////////////////\n\n  useEffect(function () {\n    WebViewer({\n      path: '/webviewer/lib',\n      initialDoc: props.pdfUrl\n    }, viewer.current).then(function (instance) {\n      instance.setTheme('dark');\n      var docViewer = instance.docViewer,\n          Annotations = instance.Annotations,\n          CoreControls = instance.CoreControls;\n      var annotManager = docViewer.getAnnotationManager(); /////////////////////////////////////////\n      // Add header button that will get file data on click\n\n      instance.setHeaderItems(function (header) {\n        header.push({\n          type: 'actionButton',\n          img: '...',\n          onClick: function () {\n            var _onClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              var xfdfString, saveOptions, options;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return annotManager.exportAnnotations();\n\n                    case 2:\n                      xfdfString = _context.sent;\n                      saveOptions = CoreControls.SaveOptions;\n                      options = {\n                        filename: 'myDocument.pdf',\n                        xfdfString: xfdfString,\n                        flags: saveOptions.LINEARIZED,\n                        downloadType: 'pdf'\n                      };\n                      instance.downloadPdf(options);\n\n                    case 6:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            function onClick() {\n              return _onClick.apply(this, arguments);\n            }\n\n            return onClick;\n          }()\n        });\n      }); ////////////////////////////////////////\n\n      instance.disableElements(['toolbarGroup-Shapes']);\n      instance.disableElements(['toolbarGroup-Edit']); // instance.disableElements(['toolbarGroup-Annotate']);\n\n      instance.disableElements(['toolbarGroup-Search']);\n      instance.disableElements(['toggleNotesButton']);\n      instance.disableElements(['searchButton']);\n      instance.disableElements(['selectToolButton']);\n      instance.disableElements(['textSelectButton']);\n      instance.disableElements(['panToolButton']);\n      instance.disableElements(['zoomOverlay']);\n      instance.disableElements(['viewControlsButton']);\n      instance.disableElements(['leftPanelButton']);\n      instance.disableElements(['zoomInButton']);\n      instance.disableElements(['zoomOutButton']);\n      instance.disableElements(['zoomOverlayButton']);\n      instance.disableElements(['zoomOverlayButton']);\n      instance.disableElements(['zoomOverlayButton']);\n      instance.disableElements(['rubberStampToolGroupButton']);\n      instance.disableElements(['stampToolGroupButton']);\n      instance.disableElements(['fileAttachmentToolGroupButton']);\n      instance.disableElements(['calloutToolGroupButton']);\n      instance.disableElements(['calloutToolGroupButton']);\n      instance.disableElements(['undoButton']);\n      instance.disableElements(['redoButton']);\n      instance.disableElements(['eraserToolButton']); /////\n\n      instance.disableElements(['fullscreenButton']);\n      instance.disableElements(['printButton']);\n      instance.disableElements(['themeChangeButton']);\n      instance.disableElements(['eraserToolButton']); ////////////////////////////////\n\n      instance.setToolbarGroup('printButton'); // set the default toolbar group to the Shapes group\n\n      instance.setToolbarGroup('downloadButton'); ///////////////////////////////////////\n      // instance.setHeaderItems(function(header) {\n      //   // get the tools overlay\n      //   const toolsOverlay = header.getHeader('toolbarGroup-Annotate').get('toolsOverlay');\n      //   header.getHeader('toolbarGroup-Annotate').delete('toolsOverlay');\n      //   // add the line tool to the top header\n      //   header.getHeader('default').push({\n      //     dataElement: 'lineToolGroupButton',\n      //   });\n      //   // add the tools overlay to the top header\n      //   header.push(toolsOverlay);});\n      /////////////////////////////////////////////////////\n      /////////////////////////for download button\n\n      instance.setHeaderItems(function (header) {\n        // get the tools overlay\n        var downloadButton = header.getHeader('menuButton').get('downloadButton');\n        header.getHeader('menuButton').delete('downloadButton'); // add the line tool to the top header\n\n        header.getHeader('default').push({\n          dataElement: 'downloadButton'\n        }); // add the tools overlay to the top header\n\n        header.push(downloadButton);\n      }); ///////////////////////////////////////////////////\n      ///save button header\n\n      instance.setHeaderItems(function (header) {\n        header.push({\n          type: 'actionButton',\n          img: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"/></svg>',\n          onClick: function () {\n            var _onClick2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n              var doc, xfdfString, data, arr, blob, fileRef;\n              return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.t0 = console;\n                      _context2.next = 3;\n                      return annotManager.exportAnnotations({\n                        links: false,\n                        widgets: false\n                      });\n\n                    case 3:\n                      _context2.t1 = _context2.sent;\n\n                      _context2.t0.log.call(_context2.t0, _context2.t1);\n\n                      // save the annotations\n                      //////////////\n                      doc = docViewer.getDocument();\n                      _context2.next = 8;\n                      return annotManager.exportAnnotations();\n\n                    case 8:\n                      xfdfString = _context2.sent;\n                      _context2.next = 11;\n                      return doc.getFileData({\n                        xfdfString: xfdfString\n                      });\n\n                    case 11:\n                      data = _context2.sent;\n                      arr = new Uint8Array(data);\n                      blob = new Blob([arr], {\n                        type: 'application/pdf'\n                      });\n                      fileRef = storage.ref().child(props.pdfUrl);\n                      fileRef.put(blob); ////////////\n                      // annotManager.exportAnnotations({ links: false, widgets: false }).then(xfdfString => {\n                      //   fetch(props.pdfUrl, {\n                      //     method: 'POST',\n                      //     body: props.pdfUrl // written into an XFDF file in server\n                      //   });\n                      //   // Full samples are available at the end of this section.\n                      // })\n\n                    case 16:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2);\n            }));\n\n            function onClick() {\n              return _onClick2.apply(this, arguments);\n            }\n\n            return onClick;\n          }()\n        });\n      }); //////////////////////////\n      // docViewer.on('documentLoaded',async  () => {\n      //   const doc = docViewer.getDocument();\n      //   const rectangleAnnot = new Annotations.RectangleAnnotation();\n      //   rectangleAnnot.PageNumber = 1;\n      //   // values are in page coordinates with (0, 0) in the top left\n      //   rectangleAnnot.X = 50;\n      //   rectangleAnnot.Y = 50;\n      //   rectangleAnnot.Width = 100;\n      //   rectangleAnnot.Height = 50;\n      //   rectangleAnnot.Author = annotManager.getCurrentUser();\n      //   annotManager.addAnnotation(rectangleAnnot);\n      //   // need to draw the annotation otherwise it won't show up until the page is refreshed\n      //   annotManager.redrawAnnotation(rectangleAnnot);\n      // });\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }\n  }, \"React sample\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"webviewer\",\n    ref: viewer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/vrajs/Desktop/firebase-file-upload-pdftron-reactjs/src/App.js"],"names":["React","useRef","useEffect","WebViewer","storage","App","props","viewer","path","initialDoc","pdfUrl","current","then","instance","setTheme","docViewer","Annotations","CoreControls","annotManager","getAnnotationManager","setHeaderItems","header","push","type","img","onClick","exportAnnotations","xfdfString","saveOptions","SaveOptions","options","filename","flags","LINEARIZED","downloadType","downloadPdf","disableElements","setToolbarGroup","downloadButton","getHeader","get","delete","dataElement","console","links","widgets","log","doc","getDocument","getFileData","data","arr","Uint8Array","blob","Blob","fileRef","ref","child","put"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect} from 'react';\nimport WebViewer from '@pdftron/webviewer';\nimport './App.css';\nimport { storage } from './firebase';\n \n\n\n\nconst App = (props) => {\n  const viewer = useRef(null);\n \n   \n  ///////////////////////////////////////////////////////////////////////////\n    useEffect(() => {\n      WebViewer(\n        {\n          path: '/webviewer/lib',\n          initialDoc: props.pdfUrl,\n        },  \n        viewer.current,\n      ).then((instance) => {\n        instance.setTheme('dark');\n        const { docViewer, Annotations ,   CoreControls} = instance;\n        const annotManager = docViewer.getAnnotationManager();\n        /////////////////////////////////////////\n\n\n\n\n\n          // Add header button that will get file data on click\n    instance.setHeaderItems(header => {\n      header.push({\n          type: 'actionButton',\n          img: '...',\n          onClick: async () => {\n            const xfdfString = await annotManager.exportAnnotations();\n            const saveOptions = CoreControls.SaveOptions;\n            const options = {\n              filename: 'myDocument.pdf',\n              xfdfString,\n              flags: saveOptions.LINEARIZED,\n              downloadType: 'pdf'\n            };\n            \n            instance.downloadPdf(options);\n          }\n      });\n    });\n  \n        ////////////////////////////////////////\n\n        instance.disableElements(['toolbarGroup-Shapes']);\n        instance.disableElements(['toolbarGroup-Edit']);\n        // instance.disableElements(['toolbarGroup-Annotate']);\n        instance.disableElements(['toolbarGroup-Search']);\n         \n        instance.disableElements(['toggleNotesButton']);\n        instance.disableElements(['searchButton']);\n        instance.disableElements(['selectToolButton']);\n        instance.disableElements(['textSelectButton']);\n        instance.disableElements(['panToolButton']);\n\n\n        instance.disableElements(['zoomOverlay']);\n\n        instance.disableElements(['viewControlsButton']);\n        instance.disableElements(['leftPanelButton']);\n        instance.disableElements(['zoomInButton']);\n        instance.disableElements(['zoomOutButton']);\n        instance.disableElements(['zoomOverlayButton']);\n        instance.disableElements(['zoomOverlayButton']);\n        instance.disableElements(['zoomOverlayButton']);\n        instance.disableElements(['rubberStampToolGroupButton']);\n        instance.disableElements(['stampToolGroupButton']);\n        instance.disableElements(['fileAttachmentToolGroupButton']);\n        instance.disableElements(['calloutToolGroupButton']);\n        instance.disableElements(['calloutToolGroupButton']);\n        instance.disableElements(['undoButton']);\n        instance.disableElements(['redoButton']);\n        instance.disableElements(['eraserToolButton']);\n        /////\n        instance.disableElements(['fullscreenButton']);\n        instance.disableElements(['printButton']);\n        instance.disableElements(['themeChangeButton']);\n        instance.disableElements(['eraserToolButton']);\n        \n        \n\n         \n       \n        ////////////////////////////////\n\n        instance.setToolbarGroup('printButton');\n         \n        // set the default toolbar group to the Shapes group\n        instance.setToolbarGroup('downloadButton');\n\n\n\n        ///////////////////////////////////////\n        // instance.setHeaderItems(function(header) {\n        //   // get the tools overlay\n        //   const toolsOverlay = header.getHeader('toolbarGroup-Annotate').get('toolsOverlay');\n        //   header.getHeader('toolbarGroup-Annotate').delete('toolsOverlay');\n        //   // add the line tool to the top header\n        //   header.getHeader('default').push({\n             \n        //     dataElement: 'lineToolGroupButton',\n             \n        //   });\n        //   // add the tools overlay to the top header\n        //   header.push(toolsOverlay);});\n          /////////////////////////////////////////////////////\n/////////////////////////for download button\n\n\n          instance.setHeaderItems(function(header) {\n            // get the tools overlay\n            const downloadButton = header.getHeader('menuButton').get('downloadButton');\n            header.getHeader('menuButton').delete('downloadButton');\n            // add the line tool to the top header\n            header.getHeader('default').push({\n               \n              dataElement: 'downloadButton',\n               \n            });\n            // add the tools overlay to the top header\n            header.push(downloadButton);});\n        \n\n\n       \n        \n    \n\n         ///////////////////////////////////////////////////\n         ///save button header\n         instance.setHeaderItems(header => {\n          header.push({\n            type: 'actionButton',\n            img: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"/></svg>',\n            onClick: async() => {\n              console.log(await annotManager.exportAnnotations({ links: false, widgets: false }));\n              // save the annotations\n              //////////////\n              const doc = docViewer.getDocument();\n            const xfdfString = await annotManager.exportAnnotations();\n            \n            const data = await doc.getFileData({ xfdfString});\n            const arr = new Uint8Array(data);\n            const blob = new Blob([arr], { type: 'application/pdf' });\n            let fileRef = storage.ref().child(props.pdfUrl);\n            fileRef.put(blob);\n            \n\n            ////////////\n\n\n            // annotManager.exportAnnotations({ links: false, widgets: false }).then(xfdfString => {\n            //   fetch(props.pdfUrl, {\n            //     method: 'POST',\n            //     body: props.pdfUrl // written into an XFDF file in server\n                 \n            //   });\n            //   // Full samples are available at the end of this section.\n            // })\n\n            }\n          });\n        });\n\n\n\n         //////////////////////////\n\n  \n        // docViewer.on('documentLoaded',async  () => {\n        //   const doc = docViewer.getDocument();\n     \n  \n        //   const rectangleAnnot = new Annotations.RectangleAnnotation();\n        //   rectangleAnnot.PageNumber = 1;\n        //   // values are in page coordinates with (0, 0) in the top left\n        //   rectangleAnnot.X = 50;\n        //   rectangleAnnot.Y = 50;\n        //   rectangleAnnot.Width = 100;\n        //   rectangleAnnot.Height = 50;\n        //   rectangleAnnot.Author = annotManager.getCurrentUser();\n          \n  \n        //   annotManager.addAnnotation(rectangleAnnot);\n        //   // need to draw the annotation otherwise it won't show up until the page is refreshed\n        //   annotManager.redrawAnnotation(rectangleAnnot);\n\n       \n        // });\n      });\n    }, []);\n   \n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">React sample</div>\n\n      <div className=\"webviewer\" ref={viewer}></div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}