{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar types = require('./types'); // https://github.com/npm/npm/blob/latest/lib/config/core.js#L409-L423\n\n\nvar envReplace = function envReplace(str) {\n  if (typeof str !== 'string' || !str) {\n    return str;\n  } // Replace any ${ENV} values with the appropriate environment\n\n\n  var regex = /(\\\\*)\\$\\{([^}]+)\\}/g;\n  return str.replace(regex, function (orig, esc, name) {\n    esc = esc.length > 0 && esc.length % 2;\n\n    if (esc) {\n      return orig;\n    }\n\n    if (process.env[name] === undefined) {\n      throw new Error(\"Failed to replace env in config: \".concat(orig));\n    }\n\n    return process.env[name];\n  });\n}; // https://github.com/npm/npm/blob/latest/lib/config/core.js#L362-L407\n\n\nvar parseField = function parseField(field, key) {\n  if (typeof field !== 'string') {\n    return field;\n  }\n\n  var typeList = [].concat(types[key]);\n  var isPath = typeList.indexOf(path) !== -1;\n  var isBool = typeList.indexOf(Boolean) !== -1;\n  var isString = typeList.indexOf(String) !== -1;\n  var isNumber = typeList.indexOf(Number) !== -1;\n  field = \"\".concat(field).trim();\n\n  if (/^\".*\"$/.test(field)) {\n    try {\n      field = JSON.parse(field);\n    } catch (err) {\n      throw new Error(\"Failed parsing JSON config key \".concat(key, \": \").concat(field));\n    }\n  }\n\n  if (isBool && !isString && field === '') {\n    return true;\n  }\n\n  switch (field) {\n    // eslint-disable-line default-case\n    case 'true':\n      {\n        return true;\n      }\n\n    case 'false':\n      {\n        return false;\n      }\n\n    case 'null':\n      {\n        return null;\n      }\n\n    case 'undefined':\n      {\n        return undefined;\n      }\n  }\n\n  field = envReplace(field);\n\n  if (isPath) {\n    var regex = process.platform === 'win32' ? /^~(\\/|\\\\)/ : /^~\\//;\n\n    if (regex.test(field) && process.env.HOME) {\n      field = path.resolve(process.env.HOME, field.substr(2));\n    }\n\n    field = path.resolve(field);\n  }\n\n  if (isNumber && !field.isNan()) {\n    field = Number(field);\n  }\n\n  return field;\n}; // https://github.com/npm/npm/blob/latest/lib/config/find-prefix.js\n\n\nvar findPrefix = function findPrefix(name) {\n  name = path.resolve(name);\n  var walkedUp = false;\n\n  while (path.basename(name) === 'node_modules') {\n    name = path.dirname(name);\n    walkedUp = true;\n  }\n\n  if (walkedUp) {\n    return name;\n  }\n\n  var find = function find(name, original) {\n    var regex = /^[a-zA-Z]:(\\\\|\\/)?$/;\n\n    if (name === '/' || process.platform === 'win32' && regex.test(name)) {\n      return original;\n    }\n\n    try {\n      var files = fs.readdirSync(name);\n\n      if (files.indexOf('node_modules') !== -1 || files.indexOf('package.json') !== -1) {\n        return name;\n      }\n\n      var dirname = path.dirname(name);\n\n      if (dirname === name) {\n        return original;\n      }\n\n      return find(dirname, original);\n    } catch (err) {\n      if (name === original) {\n        if (err.code === 'ENOENT') {\n          return original;\n        }\n\n        throw err;\n      }\n\n      return original;\n    }\n  };\n\n  return find(name, name);\n};\n\nexports.envReplace = envReplace;\nexports.findPrefix = findPrefix;\nexports.parseField = parseField;","map":null,"metadata":{},"sourceType":"script"}