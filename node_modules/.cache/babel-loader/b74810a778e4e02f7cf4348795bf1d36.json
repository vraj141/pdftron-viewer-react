{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar trimRepeated = require('trim-repeated');\n\nvar filenameReservedRegex = require('filename-reserved-regex');\n\nvar stripOuter = require('strip-outer'); // Doesn't make sense to have longer filenames\n\n\nvar MAX_FILENAME_LENGTH = 100;\nvar reControlChars = /[\\u0000-\\u001f\\u0080-\\u009f]/g; // eslint-disable-line no-control-regex\n\nvar reRelativePath = /^\\.+/;\n\nvar fn = function fn(string, options) {\n  if (typeof string !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  options = options || {};\n  var replacement = options.replacement === undefined ? '!' : options.replacement;\n\n  if (filenameReservedRegex().test(replacement) && reControlChars.test(replacement)) {\n    throw new Error('Replacement string cannot contain reserved filename characters');\n  }\n\n  string = string.replace(filenameReservedRegex(), replacement);\n  string = string.replace(reControlChars, replacement);\n  string = string.replace(reRelativePath, replacement);\n\n  if (replacement.length > 0) {\n    string = trimRepeated(string, replacement);\n    string = string.length > 1 ? stripOuter(string, replacement) : string;\n  }\n\n  string = filenameReservedRegex.windowsNames().test(string) ? string + replacement : string;\n  string = string.slice(0, MAX_FILENAME_LENGTH);\n  return string;\n};\n\nfn.path = function (pth, options) {\n  pth = path.resolve(pth);\n  return path.join(path.dirname(pth), fn(path.basename(pth), options));\n};\n\nmodule.exports = fn;","map":null,"metadata":{},"sourceType":"script"}