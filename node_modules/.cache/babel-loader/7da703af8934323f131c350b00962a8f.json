{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar CancelError = /*#__PURE__*/function (_Error) {\n  _inherits(CancelError, _Error);\n\n  function CancelError() {\n    var _this;\n\n    _classCallCheck(this, CancelError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CancelError).call(this, 'Promise was canceled'));\n    _this.name = 'CancelError';\n    return _this;\n  }\n\n  _createClass(CancelError, [{\n    key: \"isCanceled\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return CancelError;\n}(_wrapNativeSuper(Error));\n\nvar PCancelable = /*#__PURE__*/function () {\n  _createClass(PCancelable, null, [{\n    key: \"fn\",\n    value: function fn(userFn) {\n      return function () {\n        var args = [].slice.apply(arguments);\n        return new PCancelable(function (resolve, reject, onCancel) {\n          args.push(onCancel);\n          userFn.apply(null, args).then(resolve, reject);\n        });\n      };\n    }\n  }]);\n\n  function PCancelable(executor) {\n    var _this2 = this;\n\n    _classCallCheck(this, PCancelable);\n\n    this._cancelHandlers = [];\n    this._isPending = true;\n    this._isCanceled = false;\n    this._promise = new Promise(function (resolve, reject) {\n      _this2._reject = reject;\n      return executor(function (value) {\n        _this2._isPending = false;\n        resolve(value);\n      }, function (error) {\n        _this2._isPending = false;\n        reject(error);\n      }, function (handler) {\n        _this2._cancelHandlers.push(handler);\n      });\n    });\n  }\n\n  _createClass(PCancelable, [{\n    key: \"then\",\n    value: function then(onFulfilled, onRejected) {\n      return this._promise.then(onFulfilled, onRejected);\n    }\n  }, {\n    key: \"catch\",\n    value: function _catch(onRejected) {\n      return this._promise.catch(onRejected);\n    }\n  }, {\n    key: \"finally\",\n    value: function _finally(onFinally) {\n      return this._promise.finally(onFinally);\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this._isPending || this._isCanceled) {\n        return;\n      }\n\n      if (this._cancelHandlers.length > 0) {\n        try {\n          var _iterator = _createForOfIteratorHelper(this._cancelHandlers),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var handler = _step.value;\n              handler();\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        } catch (err) {\n          this._reject(err);\n        }\n      }\n\n      this._isCanceled = true;\n\n      this._reject(new CancelError());\n    }\n  }, {\n    key: \"isCanceled\",\n    get: function get() {\n      return this._isCanceled;\n    }\n  }]);\n\n  return PCancelable;\n}();\n\nObject.setPrototypeOf(PCancelable.prototype, Promise.prototype);\nmodule.exports = PCancelable;\nmodule.exports.CancelError = CancelError;","map":null,"metadata":{},"sourceType":"script"}