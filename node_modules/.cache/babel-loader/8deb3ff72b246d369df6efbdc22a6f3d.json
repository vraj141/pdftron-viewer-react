{"ast":null,"code":"'use strict';\n\nvar from = require('from2');\n\nvar pIsPromise = require('p-is-promise');\n\nmodule.exports = function (x) {\n  if (Array.isArray(x)) {\n    x = x.slice();\n  }\n\n  var promise;\n  var iterator;\n  prepare(x);\n\n  function prepare(value) {\n    x = value;\n    promise = pIsPromise(x) ? x : null; // we don't iterate on strings and buffers since slicing them is ~7x faster\n\n    var shouldIterate = !promise && x[Symbol.iterator] && typeof x !== 'string' && !Buffer.isBuffer(x);\n    iterator = shouldIterate ? x[Symbol.iterator]() : null;\n  }\n\n  return from(function reader(size, cb) {\n    var _this = this;\n\n    if (promise) {\n      promise.then(prepare).then(function () {\n        return reader.call(_this, size, cb);\n      }, cb);\n      return;\n    }\n\n    if (iterator) {\n      var obj = iterator.next();\n      setImmediate(cb, null, obj.done ? null : obj.value);\n      return;\n    }\n\n    if (x.length === 0) {\n      setImmediate(cb, null, null);\n      return;\n    }\n\n    var chunk = x.slice(0, size);\n    x = x.slice(size);\n    setImmediate(cb, null, chunk);\n  });\n};\n\nmodule.exports.obj = function (x) {\n  if (Array.isArray(x)) {\n    x = x.slice();\n  }\n\n  var promise;\n  var iterator;\n  prepare(x);\n\n  function prepare(value) {\n    x = value;\n    promise = pIsPromise(x) ? x : null;\n    iterator = !promise && x[Symbol.iterator] ? x[Symbol.iterator]() : null;\n  }\n\n  return from.obj(function reader(size, cb) {\n    var _this2 = this;\n\n    if (promise) {\n      promise.then(prepare).then(function () {\n        return reader.call(_this2, size, cb);\n      }, cb);\n      return;\n    }\n\n    if (iterator) {\n      var obj = iterator.next();\n      setImmediate(cb, null, obj.done ? null : obj.value);\n      return;\n    }\n\n    this.push(x);\n    setImmediate(cb, null, null);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}