{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\vrajs\\\\Desktop\\\\webviewer-react-sample-master\\\\src\\\\App.js\";\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport WebViewer from '@pdftron/webviewer';\nimport './App.css';\n\nvar App = function App() {\n  var viewer = useRef(null); // const [pdfUrl, setPdfUrl] = useState(pdfUrl);\n  // useEffect(()=>{\n  //   setPdf(props.pdfUrl);\n  // },[props.pdfUrl])\n  // // if using a class, equivalent of componentDidMount \n  // if(pdf){\n\n  useEffect(function () {\n    WebViewer({\n      path: '/webviewer/lib',\n      initialDoc: url\n    }, viewer.current).then(function (instance) {\n      var docViewer = instance.docViewer,\n          Annotations = instance.Annotations;\n      var annotManager = docViewer.getAnnotationManager();\n      docViewer.on('documentLoaded', function () {\n        var rectangleAnnot = new Annotations.RectangleAnnotation();\n        rectangleAnnot.PageNumber = 1; // values are in page coordinates with (0, 0) in the top left\n\n        rectangleAnnot.X = 50;\n        rectangleAnnot.Y = 50;\n        rectangleAnnot.Width = 100;\n        rectangleAnnot.Height = 50;\n        rectangleAnnot.Author = annotManager.getCurrentUser();\n        annotManager.addAnnotation(rectangleAnnot); // need to draw the annotation otherwise it won't show up until the page is refreshed\n\n        annotManager.redrawAnnotation(rectangleAnnot);\n      });\n    });\n  }, []); // }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, \"React sample\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"webviewer\",\n    ref: viewer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/vrajs/Desktop/webviewer-react-sample-master/src/App.js"],"names":["React","useRef","useEffect","useState","WebViewer","App","viewer","path","initialDoc","url","current","then","instance","docViewer","Annotations","annotManager","getAnnotationManager","on","rectangleAnnot","RectangleAnnotation","PageNumber","X","Y","Width","Height","Author","getCurrentUser","addAnnotation","redrawAnnotation"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAO,WAAP;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAChB,MAAMC,MAAM,GAAGL,MAAM,CAAC,IAAD,CAArB,CADgB,CAEhB;AAEA;AACA;AACA;AAEA;AACA;;AACEC,EAAAA,SAAS,CAAC,YAAM;AACdE,IAAAA,SAAS,CACP;AACEG,MAAAA,IAAI,EAAE,gBADR;AAEEC,MAAAA,UAAU,EAAEC;AAFd,KADO,EAKPH,MAAM,CAACI,OALA,CAAT,CAMEC,IANF,CAMO,UAACC,QAAD,EAAc;AAAA,UAEXC,SAFW,GAEgBD,QAFhB,CAEXC,SAFW;AAAA,UAEAC,WAFA,GAEgBF,QAFhB,CAEAE,WAFA;AAGnB,UAAMC,YAAY,GAAGF,SAAS,CAACG,oBAAV,EAArB;AAEAH,MAAAA,SAAS,CAACI,EAAV,CAAa,gBAAb,EAA+B,YAAM;AACnC,YAAMC,cAAc,GAAG,IAAIJ,WAAW,CAACK,mBAAhB,EAAvB;AACAD,QAAAA,cAAc,CAACE,UAAf,GAA4B,CAA5B,CAFmC,CAGnC;;AACAF,QAAAA,cAAc,CAACG,CAAf,GAAmB,EAAnB;AACAH,QAAAA,cAAc,CAACI,CAAf,GAAmB,EAAnB;AACAJ,QAAAA,cAAc,CAACK,KAAf,GAAuB,GAAvB;AACAL,QAAAA,cAAc,CAACM,MAAf,GAAwB,EAAxB;AACAN,QAAAA,cAAc,CAACO,MAAf,GAAwBV,YAAY,CAACW,cAAb,EAAxB;AAEAX,QAAAA,YAAY,CAACY,aAAb,CAA2BT,cAA3B,EAVmC,CAWnC;;AACAH,QAAAA,YAAY,CAACa,gBAAb,CAA8BV,cAA9B;AACD,OAbD;AAcD,KAzBD;AA0BD,GA3BQ,EA2BN,EA3BM,CAAT,CAVc,CAsChB;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAGE;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,GAAG,EAAEZ,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CA/CD;;AAiDA,eAAeD,GAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport WebViewer from '@pdftron/webviewer';\nimport './App.css';\n\nconst App = () => {\n  const viewer = useRef(null);\n  // const [pdfUrl, setPdfUrl] = useState(pdfUrl);\n\n  // useEffect(()=>{\n  //   setPdf(props.pdfUrl);\n  // },[props.pdfUrl])\n\n  // // if using a class, equivalent of componentDidMount \n  // if(pdf){\n    useEffect(() => {\n      WebViewer(\n        {\n          path: '/webviewer/lib',\n          initialDoc: url ,\n        },\n        viewer.current,\n      ).then((instance) => {\n        \n        const { docViewer, Annotations } = instance;\n        const annotManager = docViewer.getAnnotationManager();\n  \n        docViewer.on('documentLoaded', () => {\n          const rectangleAnnot = new Annotations.RectangleAnnotation();\n          rectangleAnnot.PageNumber = 1;\n          // values are in page coordinates with (0, 0) in the top left\n          rectangleAnnot.X = 50;\n          rectangleAnnot.Y = 50;\n          rectangleAnnot.Width = 100;\n          rectangleAnnot.Height = 50;\n          rectangleAnnot.Author = annotManager.getCurrentUser();\n  \n          annotManager.addAnnotation(rectangleAnnot);\n          // need to draw the annotation otherwise it won't show up until the page is refreshed\n          annotManager.redrawAnnotation(rectangleAnnot);\n        });\n      });\n    }, []);\n  // }\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">React sample</div>\n\n      <div className=\"webviewer\" ref={viewer}></div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}