{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\vrajs\\\\Desktop\\\\firebase-file-upload-pdftron-reactjs\\\\src\\\\App.js\";\n\nimport React, { useRef, useEffect } from 'react';\nimport WebViewer from '@pdftron/webviewer';\nimport './App.css';\n\nvar App = function App(props) {\n  var viewer = useRef(null); ///////////////////////////////////////////////////////////////////////////\n\n  useEffect(function () {\n    WebViewer({\n      path: '/webviewer/lib',\n      initialDoc: props.pdfUrl\n    }, viewer.current).then(function (instance) {\n      instance.setTheme('dark');\n      var docViewer = instance.docViewer,\n          Annotations = instance.Annotations;\n      var annotManager = docViewer.getAnnotationManager(); ///////////////////////////////////////////////////\n\n      docViewer.on('documentLoaded', function () {\n        var rectangleAnnot = new Annotations.RectangleAnnotation();\n        rectangleAnnot.PageNumber = 1; // values are in page coordinates with (0, 0) in the top left\n\n        rectangleAnnot.X = 50;\n        rectangleAnnot.Y = 50;\n        rectangleAnnot.Width = 100;\n        rectangleAnnot.Height = 50;\n        rectangleAnnot.Author = annotManager.getCurrentUser();\n        annotManager.addAnnotation(rectangleAnnot); // need to draw the annotation otherwise it won't show up until the page is refreshed\n\n        annotManager.redrawAnnotation(rectangleAnnot);\n      });\n    });\n  }, []); // }\n  ////////////////////////gazab bhai mara https://www.pdftron.com/documentation/web/guides/get-file-data-with-viewer/\n  // useEffect(() => {\n  //     WebViewer(\n  //       {\n  //         path: '/webviewer/lib',\n  //         initialDoc: props.pdfUrl,\n  //       },\n  //       viewer.current,\n  //     )\n  //   .then(instance => {\n  //     const { docViewer, annotManager, CoreControls } = instance;\n  //     ///////////////////////////////////////////\n  //     docViewer.on('documentLoaded', async () => {\n  //       const doc = docViewer.getDocument();\n  //       const xfdfString = await annotManager.exportAnnotations();\n  //       const options = { xfdfString };\n  //       const data = await doc.getFileData(options);\n  //       const arr = new Uint8Array(data);\n  //       const blob = new Blob([arr], { type: 'application/pdf' });\n  //       // upload blob to your server\n  //     });\n  //     ////////////////////////////////////\n  //     // Add header button that will get file data on click\n  //     instance.setHeaderItems(header => {\n  //       header.push({\n  //           type: 'actionButton',\n  //           img: '...',\n  //           onClick: async () => {\n  //             const doc = docViewer.getDocument();\n  //             const xfdfString = await annotManager.exportAnnotations();\n  //             const saveOptions = CoreControls.SaveOptions;\n  //             const options = {\n  //               xfdfString,\n  //               flags: saveOptions.LINEARIZED,\n  //               downloadType: 'pdf'\n  //             };\n  //             const data = await doc.getFileData(options);\n  //             const arr = new Uint8Array(data);\n  //             const blob = new Blob([arr], { type: 'application/pdf' });\n  //             // add code for handling Blob here\n  //           }\n  //       });\n  //     });\n  //   });\n  //       });\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, \"React sample\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"webviewer\",\n    ref: viewer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/vrajs/Desktop/firebase-file-upload-pdftron-reactjs/src/App.js"],"names":["React","useRef","useEffect","WebViewer","App","props","viewer","path","initialDoc","pdfUrl","current","then","instance","setTheme","docViewer","Annotations","annotManager","getAnnotationManager","on","rectangleAnnot","RectangleAnnotation","PageNumber","X","Y","Width","Height","Author","getCurrentUser","addAnnotation","redrawAnnotation"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAO,WAAP;;AAKA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,KAAD,EAAW;AACrB,MAAMC,MAAM,GAAGL,MAAM,CAAC,IAAD,CAArB,CADqB,CAIrB;;AACEC,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,SAAS,CACP;AACEI,MAAAA,IAAI,EAAE,gBADR;AAEEC,MAAAA,UAAU,EAAEH,KAAK,CAACI;AAFpB,KADO,EAKPH,MAAM,CAACI,OALA,CAAT,CAMEC,IANF,CAMO,UAACC,QAAD,EAAc;AACnBA,MAAAA,QAAQ,CAACC,QAAT,CAAkB,MAAlB;AADmB,UAEXC,SAFW,GAEgBF,QAFhB,CAEXE,SAFW;AAAA,UAEAC,WAFA,GAEgBH,QAFhB,CAEAG,WAFA;AAGnB,UAAMC,YAAY,GAAGF,SAAS,CAACG,oBAAV,EAArB,CAHmB,CAIlB;;AAEDH,MAAAA,SAAS,CAACI,EAAV,CAAa,gBAAb,EAA+B,YAAM;AACnC,YAAMC,cAAc,GAAG,IAAIJ,WAAW,CAACK,mBAAhB,EAAvB;AACAD,QAAAA,cAAc,CAACE,UAAf,GAA4B,CAA5B,CAFmC,CAGnC;;AACAF,QAAAA,cAAc,CAACG,CAAf,GAAmB,EAAnB;AACAH,QAAAA,cAAc,CAACI,CAAf,GAAmB,EAAnB;AACAJ,QAAAA,cAAc,CAACK,KAAf,GAAuB,GAAvB;AACAL,QAAAA,cAAc,CAACM,MAAf,GAAwB,EAAxB;AACAN,QAAAA,cAAc,CAACO,MAAf,GAAwBV,YAAY,CAACW,cAAb,EAAxB;AAGAX,QAAAA,YAAY,CAACY,aAAb,CAA2BT,cAA3B,EAXmC,CAYnC;;AACAH,QAAAA,YAAY,CAACa,gBAAb,CAA8BV,cAA9B;AACD,OAdD;AAeD,KA3BD;AA4BD,GA7BQ,EA6BN,EA7BM,CAAT,CALmB,CAmCrB;AAGF;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAGE;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,GAAG,EAAEb,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CAlGD;;AAoGA,eAAeF,GAAf","sourcesContent":["import React, { useRef, useEffect} from 'react';\nimport WebViewer from '@pdftron/webviewer';\nimport './App.css';\n \n\n\n\nconst App = (props) => {\n  const viewer = useRef(null);\n \n   \n  ///////////////////////////////////////////////////////////////////////////\n    useEffect(() => {\n      WebViewer(\n        {\n          path: '/webviewer/lib',\n          initialDoc: props.pdfUrl,\n        },\n        viewer.current,\n      ).then((instance) => {\n        instance.setTheme('dark');\n        const { docViewer, Annotations } = instance;\n        const annotManager = docViewer.getAnnotationManager();\n         ///////////////////////////////////////////////////\n  \n        docViewer.on('documentLoaded', () => {\n          const rectangleAnnot = new Annotations.RectangleAnnotation();\n          rectangleAnnot.PageNumber = 1;\n          // values are in page coordinates with (0, 0) in the top left\n          rectangleAnnot.X = 50;\n          rectangleAnnot.Y = 50;\n          rectangleAnnot.Width = 100;\n          rectangleAnnot.Height = 50;\n          rectangleAnnot.Author = annotManager.getCurrentUser();\n          \n  \n          annotManager.addAnnotation(rectangleAnnot);\n          // need to draw the annotation otherwise it won't show up until the page is refreshed\n          annotManager.redrawAnnotation(rectangleAnnot);\n        });\n      });\n    }, []);\n  // }\n\n\n////////////////////////gazab bhai mara https://www.pdftron.com/documentation/web/guides/get-file-data-with-viewer/\n  // useEffect(() => {\n  //     WebViewer(\n  //       {\n  //         path: '/webviewer/lib',\n  //         initialDoc: props.pdfUrl,\n  //       },\n  //       viewer.current,\n  //     )\n  //   .then(instance => {\n  //     const { docViewer, annotManager, CoreControls } = instance;\n  //     ///////////////////////////////////////////\n\n  //     docViewer.on('documentLoaded', async () => {\n  //       const doc = docViewer.getDocument();\n  //       const xfdfString = await annotManager.exportAnnotations();\n  //       const options = { xfdfString };\n  //       const data = await doc.getFileData(options);\n  //       const arr = new Uint8Array(data);\n  //       const blob = new Blob([arr], { type: 'application/pdf' });\n  //       // upload blob to your server\n  //     });\n\n  //     ////////////////////////////////////\n  \n  //     // Add header button that will get file data on click\n  //     instance.setHeaderItems(header => {\n  //       header.push({\n  //           type: 'actionButton',\n  //           img: '...',\n\n  //           onClick: async () => {\n  //             const doc = docViewer.getDocument();\n  //             const xfdfString = await annotManager.exportAnnotations();\n  //             const saveOptions = CoreControls.SaveOptions;\n  //             const options = {\n  //               xfdfString,\n  //               flags: saveOptions.LINEARIZED,\n  //               downloadType: 'pdf'\n  //             };\n  //             const data = await doc.getFileData(options);\n  //             const arr = new Uint8Array(data);\n  //             const blob = new Blob([arr], { type: 'application/pdf' });\n\n  \n  \n  //             // add code for handling Blob here\n  //           }\n  //       });\n  //     });\n  //   });\n  //       });\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">React sample</div>\n\n      <div className=\"webviewer\" ref={viewer}></div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}