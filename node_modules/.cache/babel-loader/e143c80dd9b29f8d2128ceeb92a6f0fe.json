{"ast":null,"code":"/* very simple input/output stream interface */\nvar Stream = function Stream() {}; // input streams //////////////\n\n/** Returns the next byte, or -1 for EOF. */\n\n\nStream.prototype.readByte = function () {\n  throw new Error(\"abstract method readByte() not implemented\");\n};\n/** Attempts to fill the buffer; returns number of bytes read, or\n *  -1 for EOF. */\n\n\nStream.prototype.read = function (buffer, bufOffset, length) {\n  var bytesRead = 0;\n\n  while (bytesRead < length) {\n    var c = this.readByte();\n\n    if (c < 0) {\n      // EOF\n      return bytesRead === 0 ? -1 : bytesRead;\n    }\n\n    buffer[bufOffset++] = c;\n    bytesRead++;\n  }\n\n  return bytesRead;\n};\n\nStream.prototype.seek = function (new_pos) {\n  throw new Error(\"abstract method seek() not implemented\");\n}; // output streams ///////////\n\n\nStream.prototype.writeByte = function (_byte) {\n  throw new Error(\"abstract method readByte() not implemented\");\n};\n\nStream.prototype.write = function (buffer, bufOffset, length) {\n  var i;\n\n  for (i = 0; i < length; i++) {\n    this.writeByte(buffer[bufOffset++]);\n  }\n\n  return length;\n};\n\nStream.prototype.flush = function () {};\n\nmodule.exports = Stream;","map":null,"metadata":{},"sourceType":"script"}