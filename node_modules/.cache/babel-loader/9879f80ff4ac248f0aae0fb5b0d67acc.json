{"ast":null,"code":"var fs = require('fs');\n\nvar util = require('util');\n\nvar stream = require('stream');\n\nvar Readable = stream.Readable;\nvar Writable = stream.Writable;\nvar PassThrough = stream.PassThrough;\n\nvar Pend = require('pend');\n\nvar EventEmitter = require('events').EventEmitter;\n\nexports.createFromBuffer = createFromBuffer;\nexports.createFromFd = createFromFd;\nexports.BufferSlicer = BufferSlicer;\nexports.FdSlicer = FdSlicer;\nutil.inherits(FdSlicer, EventEmitter);\n\nfunction FdSlicer(fd, options) {\n  options = options || {};\n  EventEmitter.call(this);\n  this.fd = fd;\n  this.pend = new Pend();\n  this.pend.max = 1;\n  this.refCount = 0;\n  this.autoClose = !!options.autoClose;\n}\n\nFdSlicer.prototype.read = function (buffer, offset, length, position, callback) {\n  var self = this;\n  self.pend.go(function (cb) {\n    fs.read(self.fd, buffer, offset, length, position, function (err, bytesRead, buffer) {\n      cb();\n      callback(err, bytesRead, buffer);\n    });\n  });\n};\n\nFdSlicer.prototype.write = function (buffer, offset, length, position, callback) {\n  var self = this;\n  self.pend.go(function (cb) {\n    fs.write(self.fd, buffer, offset, length, position, function (err, written, buffer) {\n      cb();\n      callback(err, written, buffer);\n    });\n  });\n};\n\nFdSlicer.prototype.createReadStream = function (options) {\n  return new ReadStream(this, options);\n};\n\nFdSlicer.prototype.createWriteStream = function (options) {\n  return new WriteStream(this, options);\n};\n\nFdSlicer.prototype.ref = function () {\n  this.refCount += 1;\n};\n\nFdSlicer.prototype.unref = function () {\n  var self = this;\n  self.refCount -= 1;\n  if (self.refCount > 0) return;\n  if (self.refCount < 0) throw new Error(\"invalid unref\");\n\n  if (self.autoClose) {\n    fs.close(self.fd, onCloseDone);\n  }\n\n  function onCloseDone(err) {\n    if (err) {\n      self.emit('error', err);\n    } else {\n      self.emit('close');\n    }\n  }\n};\n\nutil.inherits(ReadStream, Readable);\n\nfunction ReadStream(context, options) {\n  options = options || {};\n  Readable.call(this, options);\n  this.context = context;\n  this.context.ref();\n  this.start = options.start || 0;\n  this.endOffset = options.end;\n  this.pos = this.start;\n  this.destroyed = false;\n}\n\nReadStream.prototype._read = function (n) {\n  var self = this;\n  if (self.destroyed) return;\n  var toRead = Math.min(self._readableState.highWaterMark, n);\n\n  if (self.endOffset != null) {\n    toRead = Math.min(toRead, self.endOffset - self.pos);\n  }\n\n  if (toRead <= 0) {\n    self.destroyed = true;\n    self.push(null);\n    self.context.unref();\n    return;\n  }\n\n  self.context.pend.go(function (cb) {\n    if (self.destroyed) return cb();\n    var buffer = new Buffer(toRead);\n    fs.read(self.context.fd, buffer, 0, toRead, self.pos, function (err, bytesRead) {\n      if (err) {\n        self.destroy(err);\n      } else if (bytesRead === 0) {\n        self.destroyed = true;\n        self.push(null);\n        self.context.unref();\n      } else {\n        self.pos += bytesRead;\n        self.push(buffer.slice(0, bytesRead));\n      }\n\n      cb();\n    });\n  });\n};\n\nReadStream.prototype.destroy = function (err) {\n  if (this.destroyed) return;\n  err = err || new Error(\"stream destroyed\");\n  this.destroyed = true;\n  this.emit('error', err);\n  this.context.unref();\n};\n\nutil.inherits(WriteStream, Writable);\n\nfunction WriteStream(context, options) {\n  options = options || {};\n  Writable.call(this, options);\n  this.context = context;\n  this.context.ref();\n  this.start = options.start || 0;\n  this.endOffset = options.end == null ? Infinity : +options.end;\n  this.bytesWritten = 0;\n  this.pos = this.start;\n  this.destroyed = false;\n  this.on('finish', this.destroy.bind(this));\n}\n\nWriteStream.prototype._write = function (buffer, encoding, callback) {\n  var self = this;\n  if (self.destroyed) return;\n\n  if (self.pos + buffer.length > self.endOffset) {\n    var err = new Error(\"maximum file length exceeded\");\n    err.code = 'ETOOBIG';\n    self.destroy();\n    callback(err);\n    return;\n  }\n\n  self.context.pend.go(function (cb) {\n    if (self.destroyed) return cb();\n    fs.write(self.context.fd, buffer, 0, buffer.length, self.pos, function (err, bytes) {\n      if (err) {\n        self.destroy();\n        cb();\n        callback(err);\n      } else {\n        self.bytesWritten += bytes;\n        self.pos += bytes;\n        self.emit('progress');\n        cb();\n        callback();\n      }\n    });\n  });\n};\n\nWriteStream.prototype.destroy = function () {\n  if (this.destroyed) return;\n  this.destroyed = true;\n  this.context.unref();\n};\n\nutil.inherits(BufferSlicer, EventEmitter);\n\nfunction BufferSlicer(buffer, options) {\n  EventEmitter.call(this);\n  options = options || {};\n  this.refCount = 0;\n  this.buffer = buffer;\n  this.maxChunkSize = options.maxChunkSize || Number.MAX_SAFE_INTEGER;\n}\n\nBufferSlicer.prototype.read = function (buffer, offset, length, position, callback) {\n  var end = position + length;\n  var delta = end - this.buffer.length;\n  var written = delta > 0 ? delta : length;\n  this.buffer.copy(buffer, offset, position, end);\n  setImmediate(function () {\n    callback(null, written);\n  });\n};\n\nBufferSlicer.prototype.write = function (buffer, offset, length, position, callback) {\n  buffer.copy(this.buffer, position, offset, offset + length);\n  setImmediate(function () {\n    callback(null, length, buffer);\n  });\n};\n\nBufferSlicer.prototype.createReadStream = function (options) {\n  options = options || {};\n  var readStream = new PassThrough(options);\n  readStream.destroyed = false;\n  readStream.start = options.start || 0;\n  readStream.endOffset = options.end; // by the time this function returns, we'll be done.\n\n  readStream.pos = readStream.endOffset || this.buffer.length; // respect the maxChunkSize option to slice up the chunk into smaller pieces.\n\n  var entireSlice = this.buffer.slice(readStream.start, readStream.pos);\n  var offset = 0;\n\n  while (true) {\n    var nextOffset = offset + this.maxChunkSize;\n\n    if (nextOffset >= entireSlice.length) {\n      // last chunk\n      if (offset < entireSlice.length) {\n        readStream.write(entireSlice.slice(offset, entireSlice.length));\n      }\n\n      break;\n    }\n\n    readStream.write(entireSlice.slice(offset, nextOffset));\n    offset = nextOffset;\n  }\n\n  readStream.end();\n\n  readStream.destroy = function () {\n    readStream.destroyed = true;\n  };\n\n  return readStream;\n};\n\nBufferSlicer.prototype.createWriteStream = function (options) {\n  var bufferSlicer = this;\n  options = options || {};\n  var writeStream = new Writable(options);\n  writeStream.start = options.start || 0;\n  writeStream.endOffset = options.end == null ? this.buffer.length : +options.end;\n  writeStream.bytesWritten = 0;\n  writeStream.pos = writeStream.start;\n  writeStream.destroyed = false;\n\n  writeStream._write = function (buffer, encoding, callback) {\n    if (writeStream.destroyed) return;\n    var end = writeStream.pos + buffer.length;\n\n    if (end > writeStream.endOffset) {\n      var err = new Error(\"maximum file length exceeded\");\n      err.code = 'ETOOBIG';\n      writeStream.destroyed = true;\n      callback(err);\n      return;\n    }\n\n    buffer.copy(bufferSlicer.buffer, writeStream.pos, 0, buffer.length);\n    writeStream.bytesWritten += buffer.length;\n    writeStream.pos = end;\n    writeStream.emit('progress');\n    callback();\n  };\n\n  writeStream.destroy = function () {\n    writeStream.destroyed = true;\n  };\n\n  return writeStream;\n};\n\nBufferSlicer.prototype.ref = function () {\n  this.refCount += 1;\n};\n\nBufferSlicer.prototype.unref = function () {\n  this.refCount -= 1;\n\n  if (this.refCount < 0) {\n    throw new Error(\"invalid unref\");\n  }\n};\n\nfunction createFromBuffer(buffer, options) {\n  return new BufferSlicer(buffer, options);\n}\n\nfunction createFromFd(fd, options) {\n  return new FdSlicer(fd, options);\n}","map":null,"metadata":{},"sourceType":"script"}