{"version":3,"sources":["firebase/index.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","storage","PdfApp","viewer","React","createRef","useEffect","WebViewer","path","initialDoc","current","then","instance","setTheme","docViewer","CoreControls","Annotations","annotManager","getAnnotationManager","setHeaderItems","header","push","type","img","title","onClick","_onClick","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","xfdfString","saveOptions","options","wrap","_context2","prev","next","exportAnnotations","sent","SaveOptions","filename","flags","LINEARIZED","downloadType","downloadPdf","stop","apply","this","arguments","disableElements","_onClick2","_callee3","doc","data","arr","blob","_context3","t0","console","links","widgets","t1","log","call","getDocument","getFileData","Uint8Array","Blob","ref","child","put","react_default","createElement","Fragment","className","ReactDOM","render","src_PdfApp","document","getElementById"],"mappings":"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","file":"static/js/main.844d21d5.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/storage\"\r\n\r\n \r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDVjvdgk4hBrRyO-tXlT3OicqqpM-dCNQo\",\r\n    authDomain: \"fir-react-upload-472ad.firebaseapp.com\",\r\n    projectId: \"fir-react-upload-472ad\",\r\n    storageBucket: \"fir-react-upload-472ad.appspot.com\",\r\n    messagingSenderId: \"1038885452377\",\r\n    appId: \"1:1038885452377:web:04f796878203e084b0cf48\"\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n \r\n  const storage = firebase.storage();\r\n  export{storage,firebase as default};","// import React,{useState} from 'react'; \nimport {storage} from \"./firebase\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport React, { useRef, useEffect} from 'react';\nimport WebViewer from '@pdftron/webviewer';\n\n// import './App.css';\n \n\n \n \nconst PdfApp =()=>{\n\n\n \n\n  // const viewer = useRef(null);\n  const viewer = React.createRef();\n\n  const showSignaturePanel=async()=> {\n    if (viewer.current.querySelector('iframe').contentDocument)\n      \n      console.log(\"Hiiiii\");\n     // toolbarGroup-Insert\n\n      viewer.current.querySelector('iframe').contentDocument.querySelector(\n        'button[data-element=\"toolbarGroup-Insert\"]'\n      ).click();\n\n      // viewer.current.querySelector('iframe').contentDocument.querySelector(\n      //   'div[data-element=\"signatureToolGroupButton\"]'\n      // ).firstChild.click();\n\n       viewer.current.querySelector('iframe').contentDocument.querySelector(\n         'div[data-element=\"toolsOverlay\"]'\n       ).firstChild.firstChild.firstChild.firstChild.firstChild.click() ;\n\n\n    //  console.log( viewer.current.querySelector('iframe').contentDocument.querySelector(\n    //     'div[data-element=\"toolsOverlay\"]'\n    //   )) ;\n  }\n\n   \n  \n\n  useEffect(() => {\n\n    \n    \n    WebViewer(\n      {\n        path: '/webviewer/lib',\n        initialDoc: 'https://pdftron.s3.amazonaws.com/downloads/pl/demo-annotated.pdf',\n      },  \n      viewer.current,\n    ).then((instance) => {\n      instance.setTheme('light');\n      const { docViewer, Annotations ,   CoreControls} = instance;\n      const annotManager = docViewer.getAnnotationManager();\n \n\n\n  \n  instance.setHeaderItems(header => {\n    header.push({\n        type: 'actionButton',\n        img: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z\"/></svg>',\n        title: 'download',\n        onClick: async () => {\n          const xfdfString = await annotManager.exportAnnotations();\n          const saveOptions = CoreControls.SaveOptions;\n          const options = {\n            filename: 'myDocument.pdf',\n            xfdfString,\n            flags: saveOptions.LINEARIZED,\n            downloadType: 'pdf'\n          };\n          \n          instance.downloadPdf(options);\n        }\n    });\n  });\n  \n\n    ///disabled unuseful elements in tool bar\ninstance.disableElements(['zoomInButton','zoomOutButton','zoomOverlayButton','startFormEditingToolGroupButton','cropToolGroupButton','printButton','eraserToolButton','themeChangeButton','fullscreenButton','eraserToolButton','redoButton','undoButton','calloutToolGroupButton','fileAttachmentToolGroupButton','fileAttachmentToolGroupButton','stampToolGroupButton','rubberStampToolGroupButton','leftPanelButton','viewControlsButton','zoomOverlay','panToolButton','textSelectButton','selectToolButton','searchButton','toggleNotesButton','toolbarGroup-Annotate','toolbarGroup-Shapes','toolbarGroup-Edit','toolbarGroup-Annotate','menuButton']);\n\n  \n       instance.setHeaderItems(header => {\n        header.push({\n          \n          type: 'actionButton',\n          img: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"/></svg>',\n          title: 'save button',\n          onClick: async() => {\n            console.log(await annotManager.exportAnnotations({ links: false, widgets: false }));\n            // save the annotations\n            //////////////\n            const doc = docViewer.getDocument();\n          const xfdfString = await annotManager.exportAnnotations();\n          \n          const data = await doc.getFileData({ xfdfString});\n          const arr = new Uint8Array(data);\n          const blob = new Blob([arr], { type: 'application/pdf' });\n          let fileRef = storage.ref().child('https://www.eurofound.europa.eu/sites/default/files/ef_publication/field_ef_document/ef1710en.pdf' );\n          fileRef.put(blob);\n          \n\n          }\n        });\n      });\n\n\n    });\n  }, []);\n \n \n  return(\n      <>\n    <>\n    \n    </>\n    <div className=\"App\">\n      \n      <div className=\"webviewer\" ref={viewer}></div>\n      {/* <button onClick={showSignaturePanel}>E-sign</button>  */}\n    </div>\n       \n    \n    \n     </>\n  );\n};\n \nReactDOM.render(<><PdfApp/></>, document.getElementById('root'));\n\n\n"],"sourceRoot":""}